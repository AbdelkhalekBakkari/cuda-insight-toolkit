diff --git CMake/cuda/FindCUDA.cmake CMake/cuda/FindCUDA.cmake
new file mode 100644
index 0000000..0f9d66e
--- /dev/null
+++ CMake/cuda/FindCUDA.cmake
@@ -0,0 +1,1289 @@
+# - Tools for building CUDA C files: libraries and build dependencies.
+# This script locates the NVIDIA CUDA C tools. It should work on linux, windows,
+# and mac and should be reasonably up to date with CUDA C releases.
+#
+# This script makes use of the standard find_package arguments of <VERSION>,
+# REQUIRED and QUIET.  CUDA_FOUND will report if an acceptable version of CUDA
+# was found.
+#
+# The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if the prefix
+# cannot be determined by the location of nvcc in the system path and REQUIRED
+# is specified to find_package(). To use a different installed version of the
+# toolkit set the environment variable CUDA_BIN_PATH before running cmake
+# (e.g. CUDA_BIN_PATH=/usr/local/cuda1.0 instead of the default /usr/local/cuda)
+# or set CUDA_TOOLKIT_ROOT_DIR after configuring.  If you change the value of
+# CUDA_TOOLKIT_ROOT_DIR, various components that depend on the path will be
+# relocated.
+#
+# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain
+# platforms, or to use a cuda runtime not installed in the default location. In
+# newer versions of the toolkit the cuda library is included with the graphics
+# driver- be sure that the driver version matches what is needed by the cuda
+# runtime version.
+#
+# The following variables affect the behavior of the macros in the script (in
+# alphebetical order).  Note that any of these flags can be changed multiple
+# times in the same directory before calling CUDA_ADD_EXECUTABLE,
+# CUDA_ADD_LIBRARY, CUDA_COMPILE, CUDA_COMPILE_PTX or CUDA_WRAP_SRCS.
+#
+#  CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)
+#  -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.
+#     Note that making this different from the host code when generating object
+#     or C files from CUDA code just won't work, because size_t gets defined by
+#     nvcc in the generated source.  If you compile to PTX and then load the
+#     file yourself, you can mix bit sizes between device and host.
+#
+#  CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)
+#  -- Set to ON if you want the custom build rule to be attached to the source
+#     file in Visual Studio.  Turn OFF if you add the same cuda file to multiple
+#     targets.
+#
+#     This allows the user to build the target from the CUDA file; however, bad
+#     things can happen if the CUDA source file is added to multiple targets.
+#     When performing parallel builds it is possible for the custom build
+#     command to be run more than once and in parallel causing cryptic build
+#     errors.  VS runs the rules for every source file in the target, and a
+#     source can have only one rule no matter how many projects it is added to.
+#     When the rule is run from multiple targets race conditions can occur on
+#     the generated file.  Eventually everything will get built, but if the user
+#     is unaware of this behavior, there may be confusion.  It would be nice if
+#     this script could detect the reuse of source files across multiple targets
+#     and turn the option off for the user, but no good solution could be found.
+#
+#  CUDA_BUILD_CUBIN (Default OFF)
+#  -- Set to ON to enable and extra compilation pass with the -cubin option in
+#     Device mode. The output is parsed and register, shared memory usage is
+#     printed during build.
+#
+#  CUDA_BUILD_EMULATION (Default OFF for device mode)
+#  -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files
+#     when CUDA_BUILD_EMULATION is TRUE.
+#
+#  CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)
+#  -- Set to the path you wish to have the generated files placed.  If it is
+#     blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.
+#     Intermediate files will always be placed in
+#     CMAKE_CURRENT_BINARY_DIR/CMakeFiles.
+#
+#  CUDA_HOST_COMPILATION_CPP (Default ON)
+#  -- Set to OFF for C compilation of host code.
+#
+#  CUDA_NVCC_FLAGS
+#  CUDA_NVCC_FLAGS_<CONFIG>
+#  -- Additional NVCC command line arguments.  NOTE: multiple arguments must be
+#     semi-colon delimited (e.g. --compiler-options;-Wall)
+#
+#  CUDA_PROPAGATE_HOST_FLAGS (Default ON)
+#  -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration
+#     dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the
+#     host compiler through nvcc's -Xcompiler flag.  This helps make the
+#     generated host code match the rest of the system better.  Sometimes
+#     certain flags give nvcc problems, and this will help you turn the flag
+#     propagation off.  This does not affect the flags supplied directly to nvcc
+#     via CUDA_NVCC_FLAGS or through the OPTION flags specified through
+#     CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for
+#     shared library compilation are not affected by this flag.
+#
+#  CUDA_VERBOSE_BUILD (Default OFF)
+#  -- Set to ON to see all the commands used when building the CUDA file.  When
+#     using a Makefile generator the value defaults to VERBOSE (run make
+#     VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will
+#     always print the output.
+#
+# The script creates the following macros (in alphebetical order):
+#
+#  CUDA_ADD_CUFFT_TO_TARGET( cuda_target )
+#  -- Adds the cufft library to the target (can be any target).  Handles whether
+#     you are in emulation mode or not.
+#
+#  CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )
+#  -- Adds the cublas library to the target (can be any target).  Handles
+#     whether you are in emulation mode or not.
+#
+#  CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...
+#                       [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )
+#  -- Creates an executable "cuda_target" which is made up of the files
+#     specified.  All of the non CUDA C files are compiled using the standard
+#     build rules specified by CMAKE and the cuda files are compiled to object
+#     files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is
+#     added automatically to include_directories().  Standard CMake target calls
+#     can be used on the target after calling this macro
+#     (e.g. set_target_properties and target_link_libraries).
+#
+#  CUDA_ADD_LIBRARY( cuda_target file0 file1 ...
+#                    [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )
+#  -- Same as CUDA_ADD_EXECUTABLE except that a library is created.
+#
+#  CUDA_BUILD_CLEAN_TARGET()
+#  -- Creates a convience target that deletes all the dependency files
+#     generated.  You should make clean after running this target to ensure the
+#     dependency files get regenerated.
+#
+#  CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]
+#                [OPTIONS ...] )
+#  -- Returns a list of generated files from the input source files to be used
+#     with ADD_LIBRARY or ADD_EXECUTABLE.
+#
+#  CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )
+#  -- Returns a list of PTX files generated from the input source files.
+#
+#  CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )
+#  -- Sets the directories that should be passed to nvcc
+#     (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu
+#     files.
+#
+#  CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...
+#                   [STATIC | SHARED | MODULE] [OPTIONS ...] )
+#  -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,
+#     CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this
+#     function under the hood.
+#
+#     Given the list of files (file0 file1 ... fileN) this macro generates
+#     custom commands that generate either PTX or linkable objects (use "PTX" or
+#     "OBJ" for the format argument to switch).  Files that don't end with .cu
+#     or have the HEADER_FILE_ONLY property are ignored.
+#
+#     The arguments passed in after OPTIONS are extra command line options to
+#     give to nvcc.  You can also specify per configuration options by
+#     specifying the name of the configuration followed by the options.  General
+#     options must preceed configuration specific options.  Not all
+#     configurations need to be specified, only the ones provided will be used.
+#
+#        OPTIONS -DFLAG=2 "-DFLAG_OTHER=space in flag"
+#        DEBUG -g
+#        RELEASE --use_fast_math
+#        RELWITHDEBINFO --use_fast_math;-g
+#        MINSIZEREL --use_fast_math
+#
+#     For certain configurations (namely VS generating object files with
+#     CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will
+#     be produced for the given cuda file.  This is because when you add the
+#     cuda file to Visual Studio it knows that this file produces an object file
+#     and will link in the resulting object file automatically.
+#
+#     This script will also generate a separate cmake script that is used at
+#     build time to invoke nvcc.  This is for serveral reasons.
+#
+#       1. nvcc can return negative numbers as return values which confuses
+#       Visual Studio into thinking that the command succeeded.  The script now
+#       checks the error codes and produces errors when there was a problem.
+#
+#       2. nvcc has been known to not delete incomplete results when it
+#       encounters problems.  This confuses build systems into thinking the
+#       target was generated when in fact an unusable file exists.  The script
+#       now deletes the output files if there was an error.
+#
+#       3. By putting all the options that affect the build into a file and then
+#       make the build rule dependent on the file, the output files will be
+#       regenerated when the options change.
+#
+#     This script also looks at optional arguments STATIC, SHARED, or MODULE to
+#     determine when to target the object compilation for a shared library.
+#     BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in
+#     CUDA_ADD_LIBRARY.  On some systems special flags are added for building
+#     objects intended for shared libraries.  A preprocessor macro,
+#     <target_name>_EXPORTS is defined when a shared library compilation is
+#     detected.
+#
+#     Flags passed into add_definitions with -D or /D are passed along to nvcc.
+#
+# The script defines the following variables:
+#
+#  CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.
+#  CUDA_VERSION_MINOR    -- The minor version.
+#  CUDA_VERSION
+#  CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR
+#
+#  CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).
+#  CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the
+#                           SDK.  This script will not directly support finding
+#                           specific libraries or headers, as that isn't
+#                           supported by NVIDIA.  If you want to change
+#                           libraries when the path changes see the
+#                           FindCUDA.cmake script for an example of how to clear
+#                           these variables.  There are also examples of how to
+#                           use the CUDA_SDK_ROOT_DIR to locate headers or
+#                           libraries, if you so choose (at your own risk).
+#  CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically
+#                           for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.
+#  CUDA_LIBRARIES        -- Cuda RT library.
+#  CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT
+#                           implementation (alternative to:
+#                           CUDA_ADD_CUFFT_TO_TARGET macro)
+#  CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS
+#                           implementation (alterative to:
+#                           CUDA_ADD_CUBLAS_TO_TARGET macro).
+#
+#
+###############################################################################
+#
+# SDK compatibility changes made by Luke Parkinson 2009-10
+# (gmail - l.t.parkinson)
+#
+###############################################################################
+#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)
+#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html
+#
+#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.
+#
+#  Copyright (c) 2007-2009
+#  Scientific Computing and Imaging Institute, University of Utah
+#
+#  This code is licensed under the MIT License.  See the FindCUDA.cmake script
+#  for the text of the license.
+
+# The MIT License
+#
+# License for the specific language governing rights and limitations under
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and associated documentation files (the "Software"),
+# to deal in the Software without restriction, including without limitation
+# the rights to use, copy, modify, merge, publish, distribute, sublicense,
+# and/or sell copies of the Software, and to permit persons to whom the
+# Software is furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+# DEALINGS IN THE SOFTWARE.
+#
+###############################################################################
+
+# FindCUDA.cmake
+
+# We need to have at least this version to support the VERSION_LESS argument to 'if' (2.6.2) and unset (2.6.3)
+cmake_policy(PUSH)
+cmake_minimum_required(VERSION 2.6.3)
+cmake_policy(POP)
+
+# This macro helps us find the location of helper files we will need the full path to
+macro(CUDA_FIND_HELPER_FILE _name _extension)
+  set(_full_name "${_name}.${_extension}")
+  # CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being
+  # processed.  Using this variable, we can pull out the current path, and
+  # provide a way to get access to the other files we need local to here.
+  get_filename_component(CMAKE_CURRENT_LIST_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
+  find_file(CUDA_${_name} ${_full_name} PATHS ${CMAKE_CURRENT_LIST_DIR}/FindCUDA NO_DEFAULT_PATH)
+  if(NOT CUDA_${_name})
+    set(error_message "${_full_name} not found in CMAKE_MODULE_PATH")
+    if(CUDA_FIND_REQUIRED)
+      message(FATAL_ERROR "${error_message}")
+    else(CUDA_FIND_REQUIRED)
+      if(NOT CUDA_FIND_QUIETLY)
+        message(STATUS "${error_message}")
+      endif(NOT CUDA_FIND_QUIETLY)
+    endif(CUDA_FIND_REQUIRED)
+  endif(NOT CUDA_${_name})
+  # Set this variable as internal, so the user isn't bugged with it.
+  set(CUDA_${_name} ${CUDA_${_name}} CACHE INTERNAL "Location of ${_full_name}" FORCE)
+endmacro(CUDA_FIND_HELPER_FILE)
+
+#####################################################################
+## CUDA_INCLUDE_NVCC_DEPENDENCIES
+##
+
+# So we want to try and include the dependency file if it exists.  If
+# it doesn't exist then we need to create an empty one, so we can
+# include it.
+
+# If it does exist, then we need to check to see if all the files it
+# depends on exist.  If they don't then we should clear the dependency
+# file and regenerate it later.  This covers the case where a header
+# file has disappeared or moved.
+
+macro(CUDA_INCLUDE_NVCC_DEPENDENCIES dependency_file)
+  set(CUDA_NVCC_DEPEND)
+  set(CUDA_NVCC_DEPEND_REGENERATE FALSE)
+
+
+  # Include the dependency file.  Create it first if it doesn't exist .  The
+  # INCLUDE puts a dependency that will force CMake to rerun and bring in the
+  # new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few
+  # hours figuring out why it didn't work.
+  if(NOT EXISTS ${dependency_file})
+    file(WRITE ${dependency_file} "#FindCUDA.cmake generated file.  Do not edit.\n")
+  endif()
+  # Always include this file to force CMake to run again next
+  # invocation and rebuild the dependencies.
+  #message("including dependency_file = ${dependency_file}")
+  include(${dependency_file})
+
+  # Now we need to verify the existence of all the included files
+  # here.  If they aren't there we need to just blank this variable and
+  # make the file regenerate again.
+#   if(DEFINED CUDA_NVCC_DEPEND)
+#     message("CUDA_NVCC_DEPEND set")
+#   else()
+#     message("CUDA_NVCC_DEPEND NOT set")
+#   endif()
+  if(CUDA_NVCC_DEPEND)
+    #message("CUDA_NVCC_DEPEND true")
+    foreach(f ${CUDA_NVCC_DEPEND})
+      #message("searching for ${f}")
+      if(NOT EXISTS ${f})
+        #message("file ${f} not found")
+        set(CUDA_NVCC_DEPEND_REGENERATE TRUE)
+      endif()
+    endforeach(f)
+  else(CUDA_NVCC_DEPEND)
+    #message("CUDA_NVCC_DEPEND false")
+    # No dependencies, so regenerate the file.
+    set(CUDA_NVCC_DEPEND_REGENERATE TRUE)
+  endif(CUDA_NVCC_DEPEND)
+
+  #message("CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}")
+  # No incoming dependencies, so we need to generate them.  Make the
+  # output depend on the dependency file itself, which should cause the
+  # rule to re-run.
+  if(CUDA_NVCC_DEPEND_REGENERATE)
+    file(WRITE ${dependency_file} "#FindCUDA.cmake generated file.  Do not edit.\n")
+  endif(CUDA_NVCC_DEPEND_REGENERATE)
+
+endmacro(CUDA_INCLUDE_NVCC_DEPENDENCIES)
+
+###############################################################################
+###############################################################################
+# Setup variables' defaults
+###############################################################################
+###############################################################################
+
+# Allow the user to specify if the device code is supposed to be 32 or 64 bit.
+if(CMAKE_SIZEOF_VOID_P EQUAL 8)
+  set(CUDA_64_BIT_DEVICE_CODE_DEFAULT ON)
+else()
+  set(CUDA_64_BIT_DEVICE_CODE_DEFAULT OFF)
+endif()
+option(CUDA_64_BIT_DEVICE_CODE "Compile device code in 64 bit mode" ${CUDA_64_BIT_DEVICE_CODE_DEFAULT})
+
+# Attach the build rule to the source file in VS.  This option
+option(CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE "Attach the build rule to the CUDA source file.  Enable only when the CUDA source file is added to at most one target." ON)
+
+# Prints out extra information about the cuda file during compilation
+option(CUDA_BUILD_CUBIN "Generate and parse .cubin files in Device mode." OFF)
+
+# Set whether we are using emulation or device mode.
+option(CUDA_BUILD_EMULATION "Build in Emulation mode" OFF)
+
+# Where to put the generated output.
+set(CUDA_GENERATED_OUTPUT_DIR "" CACHE PATH "Directory to put all the output files.  If blank it will default to the CMAKE_CURRENT_BINARY_DIR")
+
+# Parse HOST_COMPILATION mode.
+option(CUDA_HOST_COMPILATION_CPP "Generated file extension" ON)
+
+# Extra user settable flags
+set(CUDA_NVCC_FLAGS "" CACHE STRING "Semi-colon delimit multiple arguments.")
+
+# Propagate the host flags to the host compiler via -Xcompiler
+option(CUDA_PROPAGATE_HOST_FLAGS "Propage C/CXX_FLAGS and friends to the host compiler via -Xcompile" ON)
+
+# Specifies whether the commands used when compiling the .cu file will be printed out.
+option(CUDA_VERBOSE_BUILD "Print out the commands run while compiling the CUDA source file.  With the Makefile generator this defaults to VERBOSE variable specified on the command line, but can be forced on with this option." OFF)
+
+# CUDA SDK OPTION
+option(CUDA_USE_SDK "Use the NVIDIA CUDA SDK header files and libraries (only includes libcutil.a and headers in /common/inc by default)" ON)
+
+mark_as_advanced(
+  CUDA_64_BIT_DEVICE_CODE
+  CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE
+  CUDA_GENERATED_OUTPUT_DIR
+  CUDA_HOST_COMPILATION_CPP
+  CUDA_NVCC_FLAGS
+  CUDA_PROPAGATE_HOST_FLAGS
+  )
+
+# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we
+# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the
+# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)
+# for completeness.  We need run this loop in order to accomodate the addition
+# of extra configuration types.  Duplicate entries will be removed by
+# REMOVE_DUPLICATES.
+set(CUDA_configuration_types ${CMAKE_CONFIGURATION_TYPES} ${CMAKE_BUILD_TYPE} Debug MinSizeRel Release RelWithDebInfo)
+list(REMOVE_DUPLICATES CUDA_configuration_types)
+foreach(config ${CUDA_configuration_types})
+    string(TOUPPER ${config} config_upper)
+    set(CUDA_NVCC_FLAGS_${config_upper} "" CACHE STRING "Semi-colon delimit multiple arguments.")
+    mark_as_advanced(CUDA_NVCC_FLAGS_${config_upper})
+endforeach()
+
+###############################################################################
+###############################################################################
+# Locate CUDA, Set Build Type, etc.
+###############################################################################
+###############################################################################
+
+# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,
+# if they have then clear the cache variables, so that will be detected again.
+if(NOT "${CUDA_TOOLKIT_ROOT_DIR}" STREQUAL "${CUDA_TOOLKIT_ROOT_DIR_INTERNAL}")
+  unset(CUDA_NVCC_EXECUTABLE CACHE)
+  unset(CUDA_VERSION CACHE)
+  unset(CUDA_TOOLKIT_INCLUDE CACHE)
+  unset(CUDA_CUDART_LIBRARY CACHE)
+  unset(CUDA_CUDA_LIBRARY CACHE)
+  unset(CUDA_cublas_LIBRARY CACHE)
+  unset(CUDA_cublasemu_LIBRARY CACHE)
+  unset(CUDA_cufft_LIBRARY CACHE)
+  unset(CUDA_cufftemu_LIBRARY CACHE)
+endif()
+
+if(CUDA_USE_SDK AND NOT "${CUDA_SDK_ROOT_DIR}" STREQUAL "${CUDA_SDK_ROOT_DIR_INTERNAL}")
+  # No specific variables to catch.  Use this kind of code before calling
+  # find_package(CUDA) to clean up any variables that may depend on this path.
+  unset(CUDA_SDK_INCLUDE_PATH CACHE)
+  unset(CUDA_CUT_LIBRARY CACHE)
+endif()
+
+# Search for the cuda distribution.
+if(NOT CUDA_TOOLKIT_ROOT_DIR)
+
+  # Search in the CUDA_BIN_PATH first.
+  find_path(CUDA_TOOLKIT_ROOT_DIR
+    NAMES nvcc nvcc.exe
+    PATHS ENV CUDA_BIN_PATH
+    DOC "Toolkit location."
+    NO_DEFAULT_PATH
+    )
+  # Now search default paths
+  find_path(CUDA_TOOLKIT_ROOT_DIR
+    NAMES nvcc nvcc.exe
+    PATHS /usr/local/bin
+          /usr/local/cuda/bin
+    DOC "Toolkit location."
+    )
+
+  if (CUDA_TOOLKIT_ROOT_DIR)
+    string(REGEX REPLACE "[/\\\\]?bin[64]*[/\\\\]?$" "" CUDA_TOOLKIT_ROOT_DIR ${CUDA_TOOLKIT_ROOT_DIR})
+    # We need to force this back into the cache.
+    set(CUDA_TOOLKIT_ROOT_DIR ${CUDA_TOOLKIT_ROOT_DIR} CACHE PATH "Toolkit location." FORCE)
+  endif(CUDA_TOOLKIT_ROOT_DIR)
+  if (NOT EXISTS ${CUDA_TOOLKIT_ROOT_DIR})
+    if(CUDA_FIND_REQUIRED)
+      message(FATAL_ERROR "Specify CUDA_TOOLKIT_ROOT_DIR")
+    elseif(NOT CUDA_FIND_QUIETLY)
+      message("CUDA_TOOLKIT_ROOT_DIR not found or specified")
+    endif()
+  endif (NOT EXISTS ${CUDA_TOOLKIT_ROOT_DIR})
+endif (NOT CUDA_TOOLKIT_ROOT_DIR)
+
+# CUDA_NVCC_EXECUTABLE
+find_program(CUDA_NVCC_EXECUTABLE
+  NAMES nvcc
+  PATHS "${CUDA_TOOLKIT_ROOT_DIR}/bin"
+        "${CUDA_TOOLKIT_ROOT_DIR}/bin64"
+  ENV CUDA_BIN_PATH
+  NO_DEFAULT_PATH
+  )
+# Search default search paths, after we search our own set of paths.
+find_program(CUDA_NVCC_EXECUTABLE nvcc)
+mark_as_advanced(CUDA_NVCC_EXECUTABLE)
+
+if(CUDA_NVCC_EXECUTABLE AND NOT CUDA_VERSION)
+  # Compute the version.
+  execute_process (COMMAND ${CUDA_NVCC_EXECUTABLE} "--version" OUTPUT_VARIABLE NVCC_OUT)
+  string(REGEX REPLACE ".*release ([0-9]+)\\.([0-9]+).*" "\\1" CUDA_VERSION_MAJOR ${NVCC_OUT})
+  string(REGEX REPLACE ".*release ([0-9]+)\\.([0-9]+).*" "\\2" CUDA_VERSION_MINOR ${NVCC_OUT})
+  set(CUDA_VERSION "${CUDA_VERSION_MAJOR}.${CUDA_VERSION_MINOR}" CACHE STRING "Version of CUDA as computed from nvcc.")
+  mark_as_advanced(CUDA_VERSION)
+endif()
+
+# Always set this convenience variable
+set(CUDA_VERSION_STRING "${CUDA_VERSION}")
+
+# Here we need to determine if the version we found is acceptable.  We will
+# assume that is unless CUDA_FIND_VERSION_EXACT or CUDA_FIND_VERSION is
+# specified.  The presence of either of these options checks the version
+# string and signals if the version is acceptable or not.
+set(_cuda_version_acceptable TRUE)
+#
+if(CUDA_FIND_VERSION_EXACT AND NOT CUDA_VERSION VERSION_EQUAL CUDA_FIND_VERSION)
+  set(_cuda_version_acceptable FALSE)
+endif()
+#
+if(CUDA_FIND_VERSION       AND     CUDA_VERSION VERSION_LESS  CUDA_FIND_VERSION)
+  set(_cuda_version_acceptable FALSE)
+endif()
+#
+if(NOT _cuda_version_acceptable)
+  set(_cuda_error_message "Requested CUDA version ${CUDA_FIND_VERSION}, but found unacceptable version ${CUDA_VERSION}")
+  if(CUDA_FIND_REQUIRED)
+    message("${_cuda_error_message}")
+  elseif(NOT CUDA_FIND_QUIETLY)
+    message("${_cuda_error_message}")
+  endif()
+endif()
+
+# CUDA_TOOLKIT_INCLUDE
+find_path(CUDA_TOOLKIT_INCLUDE
+  device_functions.h # Header included in toolkit
+  PATHS "${CUDA_TOOLKIT_ROOT_DIR}/include"
+  ENV CUDA_INC_PATH
+  NO_DEFAULT_PATH
+  )
+# Search default search paths, after we search our own set of paths.
+find_path(CUDA_TOOLKIT_INCLUDE device_functions.h)
+mark_as_advanced(CUDA_TOOLKIT_INCLUDE)
+
+# Set the user list of include dir to nothing to initialize it.
+set (CUDA_NVCC_INCLUDE_ARGS_USER "")
+set (CUDA_INCLUDE_DIRS ${CUDA_TOOLKIT_INCLUDE})
+
+macro(FIND_LIBRARY_LOCAL_FIRST _var _names _doc)
+  if(CMAKE_SIZEOF_VOID_P EQUAL 8)
+    set(_cuda_64bit_lib_dir "${CUDA_TOOLKIT_ROOT_DIR}/lib64")
+  endif()
+  find_library(${_var}
+    NAMES ${_names}
+    PATHS ${_cuda_64bit_lib_dir}
+          "${CUDA_TOOLKIT_ROOT_DIR}/lib"
+    ENV CUDA_LIB_PATH
+    DOC ${_doc}
+    NO_DEFAULT_PATH
+    )
+  # Search default search paths, after we search our own set of paths.
+  find_library(${_var} NAMES ${_names} DOC ${_doc})
+endmacro()
+
+# CUDA_LIBRARIES
+find_library_local_first(CUDA_CUDART_LIBRARY cudart "\"cudart\" library")
+set(CUDA_LIBRARIES ${CUDA_CUDART_LIBRARY})
+
+# 1.1 toolkit on linux doesn't appear to have a separate library on
+# some platforms.
+find_library_local_first(CUDA_CUDA_LIBRARY cuda "\"cuda\" library (older versions only).")
+
+# Add cuda library to the link line only if it is found.
+if (CUDA_CUDA_LIBRARY)
+  set(CUDA_LIBRARIES ${CUDA_LIBRARIES} ${CUDA_CUDA_LIBRARY})
+endif(CUDA_CUDA_LIBRARY)
+
+mark_as_advanced(
+  CUDA_CUDA_LIBRARY
+  CUDA_CUDART_LIBRARY
+  )
+
+#######################
+# Look for some of the toolkit helper libraries
+macro(FIND_CUDA_HELPER_LIBS _name)
+  find_library_local_first(CUDA_${_name}_LIBRARY ${_name} "\"${_name}\" library")
+  mark_as_advanced(CUDA_${_name}_LIBRARY)
+endmacro(FIND_CUDA_HELPER_LIBS)
+
+# Search for cufft and cublas libraries.
+find_cuda_helper_libs(cufftemu)
+find_cuda_helper_libs(cublasemu)
+find_cuda_helper_libs(cufft)
+find_cuda_helper_libs(cublas)
+
+if (CUDA_BUILD_EMULATION)
+  set(CUDA_CUFFT_LIBRARIES ${CUDA_cufftemu_LIBRARY})
+  set(CUDA_CUBLAS_LIBRARIES ${CUDA_cublasemu_LIBRARY})
+else()
+  set(CUDA_CUFFT_LIBRARIES ${CUDA_cufft_LIBRARY})
+  set(CUDA_CUBLAS_LIBRARIES ${CUDA_cublas_LIBRARY})
+endif()
+
+########################
+# Look for the SDK stuff
+########################
+# Choose whether to use the SDK or not in the cmake options
+if(CUDA_USE_SDK)
+   find_path(CUDA_SDK_ROOT_DIR common/inc/cutil.h
+      "$ENV{NVSDKCUDA_ROOT}"
+      "[HKEY_LOCAL_MACHINE\\SOFTWARE\\NVIDIA Corporation\\Installed Products\\NVIDIA SDK 10\\Compute;InstallDir]"
+      "/Developer/GPU\ Computing/C"
+      DOC "Location of the NVIDIA CUDA SDK root directory (Usually of the form /path/to/sdk/NVIDIA_GPU_Computing_SDK/C/)"
+   )
+
+   # Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the
+   # environment variables.
+   set(CUDA_SDK_SEARCH_PATH
+      "${CUDA_SDK_ROOT_DIR}"
+      "${CUDA_TOOLKIT_ROOT_DIR}/local/NVSDK0.2"
+      "${CUDA_TOOLKIT_ROOT_DIR}/NVSDK0.2"
+      "${CUDA_TOOLKIT_ROOT_DIR}/NV_CUDA_SDK"
+      "$ENV{HOME}/NVIDIA_CUDA_SDK"
+      "$ENV{HOME}/NVIDIA_CUDA_SDK_MACOSX"
+      "/Developer/CUDA"
+      "$ENV{HOME}/NVIDIA_GPU_Computing_SDK"
+      "$ENV{HOME}/NVIDIA_GPU_Computing_SDK/C"
+   )
+
+   # Find the include path to cutil.h.  Use this as a template if others are
+   # needed
+   find_path(CUDA_SDK_INCLUDE_PATH
+      cutil.h
+      PATHS ${CUDA_SDK_SEARCH_PATH}
+      PATH_SUFFIXES "common/inc"
+      DOC "Location of SDK header files"
+      NO_DEFAULT_PATH
+   )
+   # Now search system paths
+   find_path(CUDA_SDK_INCLUDE_PATH cutil.h DOC "Location of cutil.h")
+
+   mark_as_advanced(CUDA_SDK_INCLUDE_PATH)
+
+   if(CUDA_SDK_INCLUDE_PATH)
+      # Now included in the INCLUDE_ONCE macro
+      # include_directories(${CUDA_SDK_INCLUDE_PATH})
+   else(CUDA_SDK_INCLUDE_PATH)
+      message("CUDA SDK include directories not found.  Check the SDK root directory is set correctly and that the SDK has built correctly.")
+   endif(CUDA_SDK_INCLUDE_PATH)
+
+   # Find the libcutil library.  Use this as a template if others are needed
+
+   # cutil library is called cutil64 for 64 bit builds on windows.  We don't want
+   # to get these confused, so we are setting the name based on the word size of
+   # the build.
+
+   if(CMAKE_SIZEOF_VOID_P EQUAL 8)
+      set(cuda_cutil_name cutil64)
+   else(CMAKE_SIZEOF_VOID_P EQUAL 8)
+      set(cuda_cutil_name cutil32)
+   endif(CMAKE_SIZEOF_VOID_P EQUAL 8)
+
+   find_library(CUDA_CUT_LIBRARY
+      NAMES cutil ${cuda_cutil_name}
+      PATHS ${CUDA_SDK_SEARCH_PATH}
+      # The new version of the sdk shows up in common/lib, but the old one is in lib
+      PATH_SUFFIXES "common/lib" "lib" "common/lib/linux"
+      DOC "Location of cutil library"
+      NO_DEFAULT_PATH
+   )
+   # Now search system paths
+   find_library(CUDA_CUT_LIBRARY NAMES cutil ${cuda_cutil_name} DOC "Location of cutil library")
+   mark_as_advanced(CUDA_CUT_LIBRARY)
+
+   if(CUDA_CUT_LIBRARY)
+      set(CUDA_CUT_LIBRARIES ${CUDA_CUT_LIBRARY})
+   else(CUDA_CUT_LIBRARY)
+      message("CUDA SDK libcutil.a not found.  Check the SDK root directory is set correctly and that the SDK has built correctly.")
+   endif(CUDA_CUT_LIBRARY)
+
+else(CUDA_USE_SDK)
+   # Need to set to empty so the linker doesn't bother with it
+   set(CUDA_CUT_LIBRARIES "")   
+endif(CUDA_USE_SDK)
+
+
+
+#############################
+# Check for required components
+set(CUDA_FOUND TRUE)
+
+set(CUDA_TOOLKIT_ROOT_DIR_INTERNAL "${CUDA_TOOLKIT_ROOT_DIR}" CACHE INTERNAL
+  "This is the value of the last time CUDA_TOOLKIT_ROOT_DIR was set successfully." FORCE)
+set(CUDA_SDK_ROOT_DIR_INTERNAL "${CUDA_SDK_ROOT_DIR}" CACHE INTERNAL
+  "This is the value of the last time CUDA_SDK_ROOT_DIR was set successfully." FORCE)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(CUDA DEFAULT_MSG
+  CUDA_TOOLKIT_ROOT_DIR
+  CUDA_NVCC_EXECUTABLE
+  CUDA_INCLUDE_DIRS
+  CUDA_CUDART_LIBRARY
+  _cuda_version_acceptable
+  )
+
+
+
+###############################################################################
+###############################################################################
+# Macros
+###############################################################################
+###############################################################################
+
+###############################################################################
+# Add include directories to pass to the nvcc command.
+macro(CUDA_INCLUDE_DIRECTORIES)
+  foreach(dir ${ARGN})
+    list(APPEND CUDA_NVCC_INCLUDE_ARGS_USER "-I${dir}")
+  endforeach(dir ${ARGN})
+endmacro(CUDA_INCLUDE_DIRECTORIES)
+
+
+##############################################################################
+cuda_find_helper_file(parse_cubin cmake)
+cuda_find_helper_file(make2cmake cmake)
+cuda_find_helper_file(run_nvcc cmake)
+
+##############################################################################
+# Separate the OPTIONS out from the sources
+#
+macro(CUDA_GET_SOURCES_AND_OPTIONS _sources _cmake_options _options)
+  set( ${_sources} )
+  set( ${_cmake_options} )
+  set( ${_options} )
+  set( _found_options FALSE )
+  foreach(arg ${ARGN})
+    if(arg STREQUAL "OPTIONS")
+      set( _found_options TRUE )
+    elseif(
+        arg STREQUAL "WIN32" OR
+        arg STREQUAL "MACOSX_BUNDLE" OR
+        arg STREQUAL "EXCLUDE_FROM_ALL" OR
+        arg STREQUAL "STATIC" OR
+        arg STREQUAL "SHARED" OR
+        arg STREQUAL "MODULE"
+        )
+      list(APPEND ${_cmake_options} "${arg}")
+    else()
+      if ( _found_options )
+        list(APPEND ${_options} "${arg}")
+      else()
+        # Assume this is a file
+        list(APPEND ${_sources} "${arg}")
+      endif()
+    endif()
+  endforeach()
+endmacro()
+
+##############################################################################
+# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix
+#
+macro(CUDA_PARSE_NVCC_OPTIONS _option_prefix)
+  set( _found_config )
+  foreach(arg ${ARGN})
+    # Determine if we are dealing with a perconfiguration flag
+    foreach(config ${CUDA_configuration_types})
+      string(TOUPPER ${config} config_upper)
+      if (arg STREQUAL "${config_upper}")
+        set( _found_config _${arg})
+        # Set arg to nothing to keep it from being processed further
+        set( arg )
+      endif()
+    endforeach()
+
+    if ( arg )
+      list(APPEND ${_option_prefix}${_found_config} "${arg}")
+    endif()
+  endforeach()
+endmacro()
+
+##############################################################################
+# Helper to add the include directory for CUDA only once
+function(CUDA_ADD_CUDA_INCLUDE_ONCE)
+  get_directory_property(_include_directories INCLUDE_DIRECTORIES)
+  set(_add TRUE)
+  if(_include_directories)
+    foreach(dir ${_include_directories})
+      if("${dir}" STREQUAL "${CUDA_INCLUDE_DIRS}")
+        set(_add FALSE)
+      endif()
+    endforeach()
+  endif()
+  if(_add)
+      if(CUDA_SDK_INCLUDE_PATH)
+         include_directories(
+            ${CUDA_INCLUDE_DIRS}
+            ${CUDA_SDK_INCLUDE_PATH}
+         )
+      else()
+         include_directories(
+            ${CUDA_INCLUDE_DIRS}
+         )
+      endif()
+  endif()
+endfunction()
+
+function(CUDA_BUILD_SHARED_LIBRARY shared_flag)
+  set(cmake_args ${ARGN})
+  # If SHARED, MODULE, or STATIC aren't already in the list of arguments, then
+  # add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.
+  list(FIND cmake_args SHARED _cuda_found_SHARED)
+  list(FIND cmake_args MODULE _cuda_found_MODULE)
+  list(FIND cmake_args STATIC _cuda_found_STATIC)
+  if( _cuda_found_SHARED GREATER -1 OR
+      _cuda_found_MODULE GREATER -1 OR
+      _cuda_found_STATIC GREATER -1)
+    set(_cuda_build_shared_libs)
+  else()
+    if (BUILD_SHARED_LIBS)
+      set(_cuda_build_shared_libs SHARED)
+    else()
+      set(_cuda_build_shared_libs STATIC)
+    endif()
+  endif()
+  set(${shared_flag} ${_cuda_build_shared_libs} PARENT_SCOPE)
+endfunction()
+
+##############################################################################
+# This helper macro populates the following variables and setups up custom
+# commands and targets to invoke the nvcc compiler to generate C or PTX source
+# dependant upon the format parameter.  The compiler is invoked once with -M
+# to generate a dependency file and a second time with -cuda or -ptx to generate
+# a .cpp or .ptx file.
+# INPUT:
+#   cuda_target         - Target name
+#   format              - PTX or OBJ
+#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.
+#   OPTIONS             - Extra options to NVCC
+# OUTPUT:
+#   generated_files     - List of generated files
+##############################################################################
+##############################################################################
+
+macro(CUDA_WRAP_SRCS cuda_target format generated_files)
+
+  if( ${format} MATCHES "PTX" )
+    set( compile_to_ptx ON )
+  elseif( ${format} MATCHES "OBJ")
+    set( compile_to_ptx OFF )
+  else()
+    message( FATAL_ERROR "Invalid format flag passed to CUDA_WRAP_SRCS: '${format}'.  Use OBJ or PTX.")
+  endif()
+
+  # Set up all the command line flags here, so that they can be overriden on a per target basis.
+
+  set(nvcc_flags "")
+
+  # Emulation if the card isn't present.
+  if (CUDA_BUILD_EMULATION)
+    # Emulation.
+    set(nvcc_flags ${nvcc_flags} --device-emulation -D_DEVICEEMU -g)
+  else(CUDA_BUILD_EMULATION)
+    # Device mode.  No flags necessary.
+  endif(CUDA_BUILD_EMULATION)
+
+  if(CUDA_HOST_COMPILATION_CPP)
+    set(CUDA_C_OR_CXX CXX)
+  else(CUDA_HOST_COMPILATION_CPP)
+    set(nvcc_flags ${nvcc_flags} --host-compilation C)
+    set(CUDA_C_OR_CXX C)
+  endif(CUDA_HOST_COMPILATION_CPP)
+
+  set(generated_extension ${CMAKE_${CUDA_C_OR_CXX}_OUTPUT_EXTENSION})
+
+  if(CUDA_64_BIT_DEVICE_CODE)
+    set(nvcc_flags ${nvcc_flags} -m64)
+  else()
+    set(nvcc_flags ${nvcc_flags} -m32)
+  endif()
+
+  # This needs to be passed in at this stage, because VS needs to fill out the
+  # value of VCInstallDir from within VS.
+  if(CMAKE_GENERATOR MATCHES "Visual Studio")
+    if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
+      # Add nvcc flag for 64b Windows
+      set(ccbin_flags -D "\"CCBIN:PATH=$(VCInstallDir)bin\"" )
+    endif()
+  endif()
+
+  # Figure out which configure we will use and pass that in as an argument to
+  # the script.  We need to defer the decision until compilation time, because
+  # for VS projects we won't know if we are making a debug or release build
+  # until build time.
+  if(CMAKE_GENERATOR MATCHES "Visual Studio")
+    set( CUDA_build_configuration "$(ConfigurationName)" )
+  else()
+    set( CUDA_build_configuration "${CMAKE_BUILD_TYPE}")
+  endif()
+
+  # Initialize our list of includes with the user ones followed by the CUDA system ones.
+  set(CUDA_NVCC_INCLUDE_ARGS ${CUDA_NVCC_INCLUDE_ARGS_USER} "-I${CUDA_INCLUDE_DIRS}")
+  # Get the include directories for this directory and use them for our nvcc command.
+  get_directory_property(CUDA_NVCC_INCLUDE_DIRECTORIES INCLUDE_DIRECTORIES)
+  if(CUDA_NVCC_INCLUDE_DIRECTORIES)
+    foreach(dir ${CUDA_NVCC_INCLUDE_DIRECTORIES})
+      list(APPEND CUDA_NVCC_INCLUDE_ARGS "-I${dir}")
+    endforeach()
+  endif()
+
+  # Reset these variables
+  set(CUDA_WRAP_OPTION_NVCC_FLAGS)
+  foreach(config ${CUDA_configuration_types})
+    string(TOUPPER ${config} config_upper)
+    set(CUDA_WRAP_OPTION_NVCC_FLAGS_${config_upper})
+  endforeach()
+
+  CUDA_GET_SOURCES_AND_OPTIONS(_cuda_wrap_sources _cuda_wrap_cmake_options _cuda_wrap_options ${ARGN})
+  CUDA_PARSE_NVCC_OPTIONS(CUDA_WRAP_OPTION_NVCC_FLAGS ${_cuda_wrap_options})
+
+  # Figure out if we are building a shared library.  BUILD_SHARED_LIBS is
+  # respected in CUDA_ADD_LIBRARY.
+  set(_cuda_build_shared_libs FALSE)
+  # SHARED, MODULE
+  list(FIND _cuda_wrap_cmake_options SHARED _cuda_found_SHARED)
+  list(FIND _cuda_wrap_cmake_options MODULE _cuda_found_MODULE)
+  if(_cuda_found_SHARED GREATER -1 OR _cuda_found_MODULE GREATER -1)
+    set(_cuda_build_shared_libs TRUE)
+  endif()
+  # STATIC
+  list(FIND _cuda_wrap_cmake_options STATIC _cuda_found_STATIC)
+  if(_cuda_found_STATIC GREATER -1)
+    set(_cuda_build_shared_libs FALSE)
+  endif()
+
+  # CUDA_HOST_FLAGS
+  if(_cuda_build_shared_libs)
+    # If we are setting up code for a shared library, then we need to add extra flags for
+    # compiling objects for shared libraries.
+    set(CUDA_HOST_SHARED_FLAGS ${CMAKE_SHARED_LIBRARY_${CUDA_C_OR_CXX}_FLAGS})
+  else()
+    set(CUDA_HOST_SHARED_FLAGS)
+  endif()
+  # Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We
+  # always need to set the SHARED_FLAGS, though.
+  if(CUDA_PROPAGATE_HOST_FLAGS)
+    set(CUDA_HOST_FLAGS "set(CMAKE_HOST_FLAGS ${CMAKE_${CUDA_C_OR_CXX}_FLAGS} ${CUDA_HOST_SHARED_FLAGS})")
+  else()
+    set(CUDA_HOST_FLAGS "set(CMAKE_HOST_FLAGS ${CUDA_HOST_SHARED_FLAGS})")
+  endif()
+
+  set(CUDA_NVCC_FLAGS_CONFIG "# Build specific configuration flags")
+  # Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake
+  foreach(config ${CUDA_configuration_types})
+    string(TOUPPER ${config} config_upper)
+    # CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS
+    # we convert the strings to lists (like we want).
+
+    if(CUDA_PROPAGATE_HOST_FLAGS)
+      # nvcc chokes on -g3, so replace it with -g
+      if(CMAKE_COMPILER_IS_GNUCC)
+        string(REPLACE "-g3" "-g" _cuda_C_FLAGS "${CMAKE_${CUDA_C_OR_CXX}_FLAGS_${config_upper}}")
+      else()
+        set(_cuda_C_FLAGS "${CMAKE_${CUDA_C_OR_CXX}_FLAGS_${config_upper}}")
+      endif()
+
+      set(CUDA_HOST_FLAGS "${CUDA_HOST_FLAGS}\nset(CMAKE_HOST_FLAGS_${config_upper} ${_cuda_C_FLAGS})")
+    endif()
+
+    # Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list
+    # like it is currently), we can remove the quotes around the
+    # ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.
+    set(CUDA_NVCC_FLAGS_CONFIG "${CUDA_NVCC_FLAGS_CONFIG}\nset(CUDA_NVCC_FLAGS_${config_upper} \"${CUDA_NVCC_FLAGS_${config_upper}};;${CUDA_WRAP_OPTION_NVCC_FLAGS_${config_upper}}\")")
+  endforeach()
+
+  if(compile_to_ptx)
+    # Don't use any of the host compilation flags for PTX targets.
+    set(CUDA_HOST_FLAGS)
+    set(CUDA_NVCC_FLAGS_CONFIG)
+  endif()
+
+  # Get the list of definitions from the directory property
+  get_directory_property(CUDA_NVCC_DEFINITIONS COMPILE_DEFINITIONS)
+  if(CUDA_NVCC_DEFINITIONS)
+    foreach(_definition ${CUDA_NVCC_DEFINITIONS})
+      list(APPEND nvcc_flags "-D${_definition}")
+    endforeach()
+  endif()
+
+  if(_cuda_build_shared_libs)
+    list(APPEND nvcc_flags "-D${cuda_target}_EXPORTS")
+  endif()
+
+  # Determine output directory
+  if(CUDA_GENERATED_OUTPUT_DIR)
+    set(cuda_compile_output_dir "${CUDA_GENERATED_OUTPUT_DIR}")
+  else()
+    set(cuda_compile_output_dir "${CMAKE_CURRENT_BINARY_DIR}")
+  endif()
+
+  # Reset the output variable
+  set(_cuda_wrap_generated_files "")
+
+  # Iterate over the macro arguments and create custom
+  # commands for all the .cu files.
+  foreach(file ${ARGN})
+    # Ignore any file marked as a HEADER_FILE_ONLY
+    get_source_file_property(_is_header ${file} HEADER_FILE_ONLY)
+    if(${file} MATCHES ".*\\.cu$" AND NOT _is_header)
+
+      # Add a custom target to generate a c or ptx file. ######################
+
+      get_filename_component( basename ${file} NAME )
+      if( compile_to_ptx )
+        set(generated_file_path "${cuda_compile_output_dir}")
+        set(generated_file_basename "${cuda_target}_generated_${basename}.ptx")
+        set(format_flag "-ptx")
+        file(MAKE_DIRECTORY "${cuda_compile_output_dir}")
+      else( compile_to_ptx )
+        set(generated_file_path "${cuda_compile_output_dir}/${CMAKE_CFG_INTDIR}")
+        set(generated_file_basename "${cuda_target}_generated_${basename}${generated_extension}")
+        set(format_flag "-c")
+      endif( compile_to_ptx )
+
+      # Set all of our file names.  Make sure that whatever filenames that have
+      # generated_file_path in them get passed in through as a command line
+      # argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time
+      # instead of configure time.
+      set(generated_file "${generated_file_path}/${generated_file_basename}")
+      set(cmake_dependency_file "${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${generated_file_basename}.depend")
+      set(NVCC_generated_dependency_file "${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${generated_file_basename}.NVCC-depend")
+      set(generated_cubin_file "${generated_file_path}/${generated_file_basename}.cubin.txt")
+      set(custom_target_script "${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${generated_file_basename}.cmake")
+
+      # Setup properties for obj files:
+      if( NOT compile_to_ptx )
+        set_source_files_properties("${generated_file}"
+          PROPERTIES
+          EXTERNAL_OBJECT true # This is an object file not to be compiled, but only be linked.
+          )
+      endif()
+
+      # Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.
+      get_filename_component(file_path "${file}" PATH)
+      if(IS_ABSOLUTE "${file_path}")
+        set(source_file "${file}")
+      else()
+        set(source_file "${CMAKE_CURRENT_SOURCE_DIR}/${file}")
+      endif()
+
+      # Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######
+      cuda_include_nvcc_dependencies(${cmake_dependency_file})
+
+      # Convience string for output ###########################################
+      if(CUDA_BUILD_EMULATION)
+        set(cuda_build_type "Emulation")
+      else(CUDA_BUILD_EMULATION)
+        set(cuda_build_type "Device")
+      endif(CUDA_BUILD_EMULATION)
+
+      # Build the NVCC made dependency file ###################################
+      set(build_cubin OFF)
+      if ( NOT CUDA_BUILD_EMULATION AND CUDA_BUILD_CUBIN )
+         if ( NOT compile_to_ptx )
+           set ( build_cubin ON )
+         endif( NOT compile_to_ptx )
+      endif( NOT CUDA_BUILD_EMULATION AND CUDA_BUILD_CUBIN )
+
+      # Configure the build script
+      configure_file("${CUDA_run_nvcc}" "${custom_target_script}" @ONLY)
+
+      # So if a user specifies the same cuda file as input more than once, you
+      # can have bad things happen with dependencies.  Here we check an option
+      # to see if this is the behavior they want.
+      if(CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE)
+        set(main_dep MAIN_DEPENDENCY ${source_file})
+      else()
+        set(main_dep DEPENDS ${source_file})
+      endif()
+
+      if(CUDA_VERBOSE_BUILD)
+        set(verbose_output ON)
+      elseif(CMAKE_GENERATOR MATCHES "Makefiles")
+        set(verbose_output "$(VERBOSE)")
+      else()
+        set(verbose_output OFF)
+      endif()
+
+      # Create up the comment string
+      file(RELATIVE_PATH generated_file_relative_path "${CMAKE_BINARY_DIR}" "${generated_file}")
+      if(compile_to_ptx)
+        set(cuda_build_comment_string "Building NVCC ptx file ${generated_file_relative_path}")
+      else()
+        set(cuda_build_comment_string "Building NVCC (${cuda_build_type}) object ${generated_file_relative_path}")
+      endif()
+
+      # Build the generated file and dependency file ##########################
+      add_custom_command(
+        OUTPUT ${generated_file}
+        # These output files depend on the source_file and the contents of cmake_dependency_file
+        ${main_dep}
+        DEPENDS ${CUDA_NVCC_DEPEND}
+        DEPENDS ${custom_target_script}
+        # Make sure the output directory exists before trying to write to it.
+        COMMAND ${CMAKE_COMMAND} -E make_directory "${generated_file_path}"
+        COMMAND ${CMAKE_COMMAND} ARGS
+          -D verbose:BOOL=${verbose_output}
+          ${ccbin_flags}
+          -D build_configuration:STRING=${CUDA_build_configuration}
+          -D "generated_file:STRING=${generated_file}"
+          -D "generated_cubin_file:STRING=${generated_cubin_file}"
+          -P "${custom_target_script}"
+        COMMENT "${cuda_build_comment_string}"
+        )
+
+      # Make sure the build system knows the file is generated.
+      set_source_files_properties(${generated_file} PROPERTIES GENERATED TRUE)
+
+      # Don't add the object file to the list of generated files if we are using
+      # visual studio and we are attaching the build rule to the cuda file.  VS
+      # will add our object file to the linker automatically for us.
+      set(cuda_add_generated_file TRUE)
+
+      if(NOT compile_to_ptx AND CMAKE_GENERATOR MATCHES "Visual Studio" AND CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE)
+        # Visual Studio 8 crashes when you close the solution when you don't add the object file.
+        if(NOT CMAKE_GENERATOR MATCHES "Visual Studio 8")
+          #message("Not adding ${generated_file}")
+          set(cuda_add_generated_file FALSE)
+        endif()
+      endif()
+
+      if(cuda_add_generated_file)
+        list(APPEND _cuda_wrap_generated_files ${generated_file})
+      endif()
+
+      # Add the other files that we want cmake to clean on a cleanup ##########
+      list(APPEND CUDA_ADDITIONAL_CLEAN_FILES "${cmake_dependency_file}")
+      list(REMOVE_DUPLICATES CUDA_ADDITIONAL_CLEAN_FILES)
+      set(CUDA_ADDITIONAL_CLEAN_FILES ${CUDA_ADDITIONAL_CLEAN_FILES} CACHE INTERNAL "List of intermediate files that are part of the cuda dependency scanning.")
+
+    endif(${file} MATCHES ".*\\.cu$" AND NOT _is_header)
+  endforeach(file)
+
+  # Set the return parameter
+  set(${generated_files} ${_cuda_wrap_generated_files})
+endmacro(CUDA_WRAP_SRCS)
+
+
+###############################################################################
+###############################################################################
+# ADD LIBRARY
+###############################################################################
+###############################################################################
+macro(CUDA_ADD_LIBRARY cuda_target)
+
+  CUDA_ADD_CUDA_INCLUDE_ONCE()
+
+  # Separate the sources from the options
+  CUDA_GET_SOURCES_AND_OPTIONS(_sources _cmake_options _options ${ARGN})
+  CUDA_BUILD_SHARED_LIBRARY(_cuda_shared_flag ${ARGN})
+  # Create custom commands and targets for each file.
+  CUDA_WRAP_SRCS( ${cuda_target} OBJ _generated_files ${_sources}
+    ${_cmake_options} ${_cuda_shared_flag}
+    OPTIONS ${_options} )
+
+  # Add the library.
+  add_library(${cuda_target} ${_cmake_options}
+    ${_generated_files}
+    ${_sources}
+    )
+
+  target_link_libraries(${cuda_target}
+    ${CUDA_LIBRARIES}
+    ${CUDA_CUT_LIBRARIES}
+    )
+
+  # We need to set the linker language based on what the expected generated file
+  # would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.
+  set_target_properties(${cuda_target}
+    PROPERTIES
+    LINKER_LANGUAGE ${CUDA_C_OR_CXX}
+    )
+
+endmacro(CUDA_ADD_LIBRARY cuda_target)
+
+
+###############################################################################
+###############################################################################
+# ADD EXECUTABLE
+###############################################################################
+###############################################################################
+macro(CUDA_ADD_EXECUTABLE cuda_target)
+
+  CUDA_ADD_CUDA_INCLUDE_ONCE()
+
+  # Separate the sources from the options
+  CUDA_GET_SOURCES_AND_OPTIONS(_sources _cmake_options _options ${ARGN})
+  # Create custom commands and targets for each file.
+  CUDA_WRAP_SRCS( ${cuda_target} OBJ _generated_files ${_sources} OPTIONS ${_options} )
+
+  # Add the library.
+  add_executable(${cuda_target} ${_cmake_options}
+    ${_generated_files}
+    ${_sources}
+    )
+
+  target_link_libraries(${cuda_target}
+    ${CUDA_LIBRARIES}
+    ${CUDA_CUT_LIBRARIES}
+    )
+
+  # We need to set the linker language based on what the expected generated file
+  # would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.
+  set_target_properties(${cuda_target}
+    PROPERTIES
+    LINKER_LANGUAGE ${CUDA_C_OR_CXX}
+    )
+
+endmacro(CUDA_ADD_EXECUTABLE cuda_target)
+
+
+###############################################################################
+###############################################################################
+# CUDA COMPILE
+###############################################################################
+###############################################################################
+macro(CUDA_COMPILE generated_files)
+
+  # Separate the sources from the options
+  CUDA_GET_SOURCES_AND_OPTIONS(_sources _cmake_options _options ${ARGN})
+  # Create custom commands and targets for each file.
+  CUDA_WRAP_SRCS( cuda_compile OBJ _generated_files ${_sources} ${_cmake_options}
+    OPTIONS ${_options} )
+
+  set( ${generated_files} ${_generated_files})
+
+endmacro(CUDA_COMPILE)
+
+
+###############################################################################
+###############################################################################
+# CUDA COMPILE PTX
+###############################################################################
+###############################################################################
+macro(CUDA_COMPILE_PTX generated_files)
+
+  # Separate the sources from the options
+  CUDA_GET_SOURCES_AND_OPTIONS(_sources _cmake_options _options ${ARGN})
+  # Create custom commands and targets for each file.
+  CUDA_WRAP_SRCS( cuda_compile_ptx PTX _generated_files ${_sources} ${_cmake_options}
+    OPTIONS ${_options} )
+
+  set( ${generated_files} ${_generated_files})
+
+endmacro(CUDA_COMPILE_PTX)
+
+###############################################################################
+###############################################################################
+# CUDA ADD CUFFT TO TARGET
+###############################################################################
+###############################################################################
+macro(CUDA_ADD_CUFFT_TO_TARGET target)
+  if (CUDA_BUILD_EMULATION)
+    target_link_libraries(${target} ${CUDA_cufftemu_LIBRARY})
+  else()
+    target_link_libraries(${target} ${CUDA_cufft_LIBRARY})
+  endif()
+endmacro()
+
+###############################################################################
+###############################################################################
+# CUDA ADD CUBLAS TO TARGET
+###############################################################################
+###############################################################################
+macro(CUDA_ADD_CUBLAS_TO_TARGET target)
+  if (CUDA_BUILD_EMULATION)
+    target_link_libraries(${target} ${CUDA_cublasemu_LIBRARY})
+  else()
+    target_link_libraries(${target} ${CUDA_cublas_LIBRARY})
+  endif()
+endmacro()
+
+###############################################################################
+###############################################################################
+# CUDA BUILD CLEAN TARGET
+###############################################################################
+###############################################################################
+macro(CUDA_BUILD_CLEAN_TARGET)
+  # Call this after you add all your CUDA targets, and you will get a convience
+  # target.  You should also make clean after running this target to get the
+  # build system to generate all the code again.
+
+  set(cuda_clean_target_name clean_cuda_depends)
+  if (CMAKE_GENERATOR MATCHES "Visual Studio")
+    string(TOUPPER ${cuda_clean_target_name} cuda_clean_target_name)
+  endif()
+  add_custom_target(${cuda_clean_target_name}
+    COMMAND ${CMAKE_COMMAND} -E remove ${CUDA_ADDITIONAL_CLEAN_FILES})
+
+  # Clear out the variable, so the next time we configure it will be empty.
+  # This is useful so that the files won't persist in the list after targets
+  # have been removed.
+  set(CUDA_ADDITIONAL_CLEAN_FILES "" CACHE INTERNAL "List of intermediate files that are part of the cuda dependency scanning.")
+endmacro(CUDA_BUILD_CLEAN_TARGET)
diff --git CMake/cuda/FindCUDA/make2cmake.cmake CMake/cuda/FindCUDA/make2cmake.cmake
new file mode 100644
index 0000000..7fce167
--- /dev/null
+++ CMake/cuda/FindCUDA/make2cmake.cmake
@@ -0,0 +1,79 @@
+#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)
+#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html
+#
+#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.
+#
+#  Copyright (c) 2007-2009
+#  Scientific Computing and Imaging Institute, University of Utah
+#
+#  This code is licensed under the MIT License.  See the FindCUDA.cmake script
+#  for the text of the license.
+
+# The MIT License
+#
+# License for the specific language governing rights and limitations under
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and associated documentation files (the "Software"),
+# to deal in the Software without restriction, including without limitation
+# the rights to use, copy, modify, merge, publish, distribute, sublicense,
+# and/or sell copies of the Software, and to permit persons to whom the
+# Software is furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+# DEALINGS IN THE SOFTWARE.
+#
+
+#######################################################################
+# This converts a file written in makefile syntax into one that can be included
+# by CMake.
+
+file(READ ${input_file} depend_text)
+
+if (${depend_text} MATCHES ".+")
+
+  # message("FOUND DEPENDS")
+
+  # Remember, four backslashes is escaped to one backslash in the string.
+  string(REGEX REPLACE "\\\\ " " " depend_text ${depend_text})
+
+  # This works for the nvcc -M generated dependency files.
+  string(REGEX REPLACE "^.* : " "" depend_text ${depend_text})
+  string(REGEX REPLACE "[ \\\\]*\n" ";" depend_text ${depend_text})
+
+  set(dependency_list "")
+
+  foreach(file ${depend_text})
+
+    string(REGEX REPLACE "^ +" "" file ${file})
+
+    if(NOT IS_DIRECTORY ${file})
+      # If softlinks start to matter, we should change this to REALPATH.  For now we need
+      # to flatten paths, because nvcc can generate stuff like /bin/../include instead of
+      # just /include.
+      get_filename_component(file_absolute "${file}" ABSOLUTE)
+      list(APPEND dependency_list "${file_absolute}")
+    endif(NOT IS_DIRECTORY ${file})
+
+  endforeach(file)
+
+else()
+  # message("FOUND NO DEPENDS")
+endif()
+
+# Remove the duplicate entries and sort them.
+list(REMOVE_DUPLICATES dependency_list)
+list(SORT dependency_list)
+
+foreach(file ${dependency_list})
+  set(cuda_nvcc_depend "${cuda_nvcc_depend} \"${file}\"\n")
+endforeach()
+
+file(WRITE ${output_file} "# Generated by: make2cmake.cmake\nSET(CUDA_NVCC_DEPEND\n ${cuda_nvcc_depend})\n\n")
diff --git CMake/cuda/FindCUDA/parse_cubin.cmake CMake/cuda/FindCUDA/parse_cubin.cmake
new file mode 100644
index 0000000..2518c68
--- /dev/null
+++ CMake/cuda/FindCUDA/parse_cubin.cmake
@@ -0,0 +1,112 @@
+#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)
+#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html
+#
+#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.
+#
+#  Copyright (c) 2007-2009
+#  Scientific Computing and Imaging Institute, University of Utah
+#
+#  This code is licensed under the MIT License.  See the FindCUDA.cmake script
+#  for the text of the license.
+
+# The MIT License
+#
+# License for the specific language governing rights and limitations under
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and associated documentation files (the "Software"),
+# to deal in the Software without restriction, including without limitation
+# the rights to use, copy, modify, merge, publish, distribute, sublicense,
+# and/or sell copies of the Software, and to permit persons to whom the
+# Software is furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+# DEALINGS IN THE SOFTWARE.
+#
+
+#######################################################################
+# Parses a .cubin file produced by nvcc and reports statistics about the file.
+
+
+file(READ ${input_file} file_text)
+
+if (${file_text} MATCHES ".+")
+
+  # Remember, four backslashes is escaped to one backslash in the string.
+  string(REGEX REPLACE ";" "\\\\;" file_text ${file_text})
+  string(REGEX REPLACE "\ncode" ";code" file_text ${file_text})
+
+  list(LENGTH file_text len)
+
+  foreach(line ${file_text})
+
+    # Only look at "code { }" blocks.
+    if(line MATCHES "^code")
+
+      # Break into individual lines.
+      string(REGEX REPLACE "\n" ";" line ${line})
+
+      foreach(entry ${line})
+
+        # Extract kernel names.
+        if (${entry} MATCHES "[^g]name = ([^ ]+)")
+          string(REGEX REPLACE ".* = ([^ ]+)" "\\1" entry ${entry})
+
+          # Check to see if the kernel name starts with "_"
+          set(skip FALSE)
+          # if (${entry} MATCHES "^_")
+            # Skip the rest of this block.
+            # message("Skipping ${entry}")
+            # set(skip TRUE)
+          # else (${entry} MATCHES "^_")
+            message("Kernel:    ${entry}")
+          # endif (${entry} MATCHES "^_")
+
+        endif(${entry} MATCHES "[^g]name = ([^ ]+)")
+
+        # Skip the rest of the block if necessary
+        if(NOT skip)
+
+          # Registers
+          if (${entry} MATCHES "reg([ ]+)=([ ]+)([^ ]+)")
+            string(REGEX REPLACE ".*([ ]+)=([ ]+)([^ ]+)" "\\3" entry ${entry})
+            message("Registers: ${entry}")
+          endif()
+
+          # Local memory
+          if (${entry} MATCHES "lmem([ ]+)=([ ]+)([^ ]+)")
+            string(REGEX REPLACE ".*([ ]+)=([ ]+)([^ ]+)" "\\3" entry ${entry})
+            message("Local:     ${entry}")
+          endif()
+
+          # Shared memory
+          if (${entry} MATCHES "smem([ ]+)=([ ]+)([^ ]+)")
+            string(REGEX REPLACE ".*([ ]+)=([ ]+)([^ ]+)" "\\3" entry ${entry})
+            message("Shared:    ${entry}")
+          endif()
+
+          if (${entry} MATCHES "^}")
+            message("")
+          endif()
+
+        endif(NOT skip)
+
+
+      endforeach(entry)
+
+    endif(line MATCHES "^code")
+
+  endforeach(line)
+
+else()
+  # message("FOUND NO DEPENDS")
+endif()
+
+
diff --git CMake/cuda/FindCUDA/run_nvcc.cmake CMake/cuda/FindCUDA/run_nvcc.cmake
new file mode 100644
index 0000000..d7fde75
--- /dev/null
+++ CMake/cuda/FindCUDA/run_nvcc.cmake
@@ -0,0 +1,273 @@
+#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)
+#
+#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.
+#
+#  This code is licensed under the MIT License.  See the FindCUDA.cmake script
+#  for the text of the license.
+
+# The MIT License
+#
+# License for the specific language governing rights and limitations under
+# Permission is hereby granted, free of charge, to any person obtaining a
+# copy of this software and associated documentation files (the "Software"),
+# to deal in the Software without restriction, including without limitation
+# the rights to use, copy, modify, merge, publish, distribute, sublicense,
+# and/or sell copies of the Software, and to permit persons to whom the
+# Software is furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included
+# in all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+# DEALINGS IN THE SOFTWARE.
+
+
+##########################################################################
+# This file runs the nvcc commands to produce the desired output file along with
+# the dependency file needed by CMake to compute dependencies.  In addition the
+# file checks the output of each command and if the command fails it deletes the
+# output files.
+
+# Input variables
+#
+# verbose:BOOL=<>          OFF: Be as quiet as possible (default)
+#                          ON : Describe each step
+#
+# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or
+#                               RelWithDebInfo, but it should match one of the
+#                               entries in CUDA_HOST_FLAGS. This is the build
+#                               configuration used when compiling the code.  If
+#                               blank or unspecified Debug is assumed as this is
+#                               what CMake does.
+#
+# generated_file:STRING=<> File to generate.  This argument must be passed in.
+#
+# generated_cubin_file:STRING=<> File to generate.  This argument must be passed
+#                                                   in if build_cubin is true.
+
+if(NOT generated_file)
+  message(FATAL_ERROR "You must specify generated_file on the command line")
+endif()
+
+# Set these up as variables to make reading the generated file easier
+set(CMAKE_COMMAND "@CMAKE_COMMAND@")
+set(source_file "@source_file@")
+set(NVCC_generated_dependency_file "@NVCC_generated_dependency_file@")
+set(cmake_dependency_file "@cmake_dependency_file@")
+set(CUDA_make2cmake "@CUDA_make2cmake@")
+set(CUDA_parse_cubin "@CUDA_parse_cubin@")
+set(build_cubin @build_cubin@)
+# We won't actually use these variables for now, but we need to set this, in
+# order to force this file to be run again if it changes.
+set(generated_file_path "@generated_file_path@")
+set(generated_file_internal "@generated_file@")
+set(generated_cubin_file_internal "@generated_cubin_file@")
+
+set(CUDA_NVCC_EXECUTABLE "@CUDA_NVCC_EXECUTABLE@")
+set(CUDA_NVCC_FLAGS "@CUDA_NVCC_FLAGS@;;@CUDA_WRAP_OPTION_NVCC_FLAGS@")
+@CUDA_NVCC_FLAGS_CONFIG@
+set(nvcc_flags "@nvcc_flags@")
+set(CUDA_NVCC_INCLUDE_ARGS "@CUDA_NVCC_INCLUDE_ARGS@")
+set(format_flag "@format_flag@")
+
+if(build_cubin AND NOT generated_cubin_file)
+  message(FATAL_ERROR "You must specify generated_cubin_file on the command line")
+endif()
+
+# This is the list of host compilation flags.  It C or CXX should already have
+# been chosen by FindCUDA.cmake.
+@CUDA_HOST_FLAGS@
+
+# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler
+set(nvcc_host_compiler_flags "")
+# If we weren't given a build_configuration, use Debug.
+if(NOT build_configuration)
+  set(build_configuration Debug)
+endif()
+string(TOUPPER "${build_configuration}" build_configuration)
+#message("CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}")
+foreach(flag ${CMAKE_HOST_FLAGS} ${CMAKE_HOST_FLAGS_${build_configuration}})
+  # Extra quotes are added around each flag to help nvcc parse out flags with spaces.
+  set(nvcc_host_compiler_flags "${nvcc_host_compiler_flags},\"${flag}\"")
+endforeach()
+if (nvcc_host_compiler_flags)
+  set(nvcc_host_compiler_flags "-Xcompiler" ${nvcc_host_compiler_flags})
+endif()
+#message("nvcc_host_compiler_flags = \"${nvcc_host_compiler_flags}\"")
+# Add the build specific configuration flags
+list(APPEND CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS_${build_configuration}})
+
+if(DEFINED CCBIN)
+  set(CCBIN -ccbin "${CCBIN}")
+endif()
+
+# cuda_execute_process - Executes a command with optional command echo and status message.
+#
+#   status  - Status message to print if verbose is true
+#   command - COMMAND argument from the usual execute_process argument structure
+#   ARGN    - Remaining arguments are the command with arguments
+#
+#   CUDA_result - return value from running the command
+#
+# Make this a macro instead of a function, so that things like RESULT_VARIABLE
+# and other return variables are present after executing the process.
+macro(cuda_execute_process status command)
+  set(_command ${command})
+  if(NOT _command STREQUAL "COMMAND")
+    message(FATAL_ERROR "Malformed call to cuda_execute_process.  Missing COMMAND as second argument. (command = ${command})")
+  endif()
+  if(verbose)
+    execute_process(COMMAND "${CMAKE_COMMAND}" -E echo -- ${status})
+    # Now we need to build up our command string.  We are accounting for quotes
+    # and spaces, anything else is left up to the user to fix if they want to
+    # copy and paste a runnable command line.
+    set(cuda_execute_process_string)
+    foreach(arg ${ARGN})
+      # If there are quotes, excape them, so they come through.
+      string(REPLACE "\"" "\\\"" arg ${arg})
+      # Args with spaces need quotes around them to get them to be parsed as a single argument.
+      if(arg MATCHES " ")
+        list(APPEND cuda_execute_process_string "\"${arg}\"")
+      else()
+        list(APPEND cuda_execute_process_string ${arg})
+      endif()
+    endforeach()
+    # Echo the command
+    execute_process(COMMAND ${CMAKE_COMMAND} -E echo ${cuda_execute_process_string})
+  endif(verbose)
+  # Run the command
+  execute_process(COMMAND ${ARGN} RESULT_VARIABLE CUDA_result )
+endmacro()
+
+# Delete the target file
+cuda_execute_process(
+  "Removing ${generated_file}"
+  COMMAND "${CMAKE_COMMAND}" -E remove "${generated_file}"
+  )
+
+# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag
+# for dependency generation and hope for the best.
+set(depends_CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS}")
+set(CUDA_VERSION @CUDA_VERSION@)
+if(CUDA_VERSION VERSION_LESS "3.0")
+  cmake_policy(PUSH)
+  # CMake policy 0007 NEW states that empty list elements are not
+  # ignored.  I'm just setting it to avoid the warning that's printed.
+  cmake_policy(SET CMP0007 NEW)
+  # Note that this will remove all occurances of -G.
+  list(REMOVE_ITEM depends_CUDA_NVCC_FLAGS "-G")
+  cmake_policy(POP)
+endif()
+
+# Generate the dependency file
+cuda_execute_process(
+  "Generating dependency file: ${NVCC_generated_dependency_file}"
+  COMMAND "${CUDA_NVCC_EXECUTABLE}"
+  "${source_file}"
+  ${depends_CUDA_NVCC_FLAGS}
+  ${nvcc_flags}
+  ${CCBIN}
+  ${nvcc_host_compiler_flags}
+  -DNVCC
+  -M
+  -o "${NVCC_generated_dependency_file}"
+  ${CUDA_NVCC_INCLUDE_ARGS}
+  )
+
+if(CUDA_result)
+  message(FATAL_ERROR "Error generating ${generated_file}")
+endif()
+
+# Generate the cmake readable dependency file to a temp file.  Don't put the
+# quotes just around the filenames for the input_file and output_file variables.
+# CMake will pass the quotes through and not be able to find the file.
+cuda_execute_process(
+  "Generating temporary cmake readable file: ${cmake_dependency_file}.tmp"
+  COMMAND "${CMAKE_COMMAND}"
+  -D "input_file:FILEPATH=${NVCC_generated_dependency_file}"
+  -D "output_file:FILEPATH=${cmake_dependency_file}.tmp"
+  -P "${CUDA_make2cmake}"
+  )
+
+if(CUDA_result)
+  message(FATAL_ERROR "Error generating ${generated_file}")
+endif()
+
+# Copy the file if it is different
+cuda_execute_process(
+  "Copy if different ${cmake_dependency_file}.tmp to ${cmake_dependency_file}"
+  COMMAND "${CMAKE_COMMAND}" -E copy_if_different "${cmake_dependency_file}.tmp" "${cmake_dependency_file}"
+  )
+
+if(CUDA_result)
+  message(FATAL_ERROR "Error generating ${generated_file}")
+endif()
+
+# Delete the temporary file
+cuda_execute_process(
+  "Removing ${cmake_dependency_file}.tmp and ${NVCC_generated_dependency_file}"
+  COMMAND "${CMAKE_COMMAND}" -E remove "${cmake_dependency_file}.tmp" "${NVCC_generated_dependency_file}"
+  )
+
+if(CUDA_result)
+  message(FATAL_ERROR "Error generating ${generated_file}")
+endif()
+
+# Generate the code
+cuda_execute_process(
+  "Generating ${generated_file}"
+  COMMAND "${CUDA_NVCC_EXECUTABLE}"
+  "${source_file}"
+  ${CUDA_NVCC_FLAGS}
+  ${nvcc_flags}
+  ${CCBIN}
+  ${nvcc_host_compiler_flags}
+  -DNVCC
+  ${format_flag} -o "${generated_file}"
+  ${CUDA_NVCC_INCLUDE_ARGS}
+  )
+
+if(CUDA_result)
+  # Since nvcc can sometimes leave half done files make sure that we delete the output file.
+  cuda_execute_process(
+    "Removing ${generated_file}"
+    COMMAND "${CMAKE_COMMAND}" -E remove "${generated_file}"
+    )
+  message(FATAL_ERROR "Error generating file ${generated_file}")
+else()
+  if(verbose)
+    message("Generated ${generated_file} successfully.")
+  endif()
+endif()
+
+# Cubin resource report commands.
+if( build_cubin )
+  # Run with -cubin to produce resource usage report.
+  cuda_execute_process(
+    "Generating ${generated_cubin_file}"
+    COMMAND "${CUDA_NVCC_EXECUTABLE}"
+    "${source_file}"
+    ${CUDA_NVCC_FLAGS}
+    ${nvcc_flags}
+    ${CCBIN}
+    ${nvcc_host_compiler_flags}
+    -DNVCC
+    -cubin
+    -o "${generated_cubin_file}"
+    ${CUDA_NVCC_INCLUDE_ARGS}
+    )
+
+  # Execute the parser script.
+  cuda_execute_process(
+    "Executing the parser script"
+    COMMAND  "${CMAKE_COMMAND}"
+    -D "input_file:STRING=${generated_cubin_file}"
+    -P "${CUDA_parse_cubin}"
+    )
+
+endif( build_cubin )
diff --git CMakeLists.txt CMakeLists.txt
index 0b839c7..c549aa9 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -795,6 +795,8 @@ INCLUDE_DIRECTORIES(
   ${ITK_INCLUDE_DIRS_BUILD_TREE}
   ${ITK_INCLUDE_DIRS_BUILD_TREE_CXX}
   ${ITK_INCLUDE_DIRS_SYSTEM}
+  ${CUDA_TOOLKIT_INCLUDE}
+  ${CUDA_SDK_INCLUDE_PATH}
 )
 
 #-----------------------------------------------------------------------------
@@ -895,3 +897,11 @@ IF(CMAKE_COMPILER_IS_GNUCXX)
   ENDFOREACH(COMP_OPTION)
 ENDIF(CMAKE_COMPILER_IS_GNUCXX)
 
+
+set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMake/cuda" ${CMAKE_MODULE_PATH})
+find_package(CUDA QUIET REQUIRED)                             
+
+
+if(NOT CUDA_FOUND)                                            
+   message("CUDA could not be located on your system.")       
+endif(NOT CUDA_FOUND)                                         
diff --git Code/BasicFilters/itkTileImageFilter.txx Code/BasicFilters/itkTileImageFilter.txx
index 1c397b6..2c14d51 100644
--- Code/BasicFilters/itkTileImageFilter.txx
+++ Code/BasicFilters/itkTileImageFilter.txx
@@ -79,7 +79,7 @@ TileImageFilter<TInputImage, TOutputImage>
         }
       OutputImageRegionType tempRegion(tempIndex, tempSize);
       tempImage->SetRegions(tempRegion);
-      tempImage->SetPixelContainer(const_cast<ImportImageContainer<unsigned long, InputPixelType> *>(this->GetInput(it.Get().m_ImageNumber)->GetPixelContainer()));
+      tempImage->SetPixelContainer(const_cast<CudaImportImageContainer<unsigned long, InputPixelType> *>(this->GetInput(it.Get().m_ImageNumber)->GetPixelContainer()));
       paste->SetSourceImage(tempImage);
       paste->SetDestinationIndex(it.Get().m_Region.GetIndex());
       paste->SetSourceRegion(tempRegion);
diff --git Code/Common/CMakeLists.txt Code/Common/CMakeLists.txt
index 55749ea..8f66d32 100644
--- Code/Common/CMakeLists.txt
+++ Code/Common/CMakeLists.txt
@@ -129,7 +129,7 @@ IF(ITK_EXPLICIT_INSTANTIATION)
   )
 ENDIF(ITK_EXPLICIT_INSTANTIATION)
 
-ADD_LIBRARY(ITKCommon ${ITK_COMMON_BUILD_TYPE} ${ITKCommon_SRCS} ${WRAPPER_EXPLICIT_ITKCommon_SRCS})
+CUDA_ADD_LIBRARY(ITKCommon ${ITK_COMMON_BUILD_TYPE} ${ITKCommon_SRCS} ${WRAPPER_EXPLICIT_ITKCommon_SRCS})
 
 TARGET_LINK_LIBRARIES (ITKCommon itkvnl_inst itksys)
 IF(UNIX)
diff --git Code/Common/CudaImageToImageFilter.h Code/Common/CudaImageToImageFilter.h
new file mode 100644
index 0000000..aea13fc
--- /dev/null
+++ Code/Common/CudaImageToImageFilter.h
@@ -0,0 +1,72 @@
+
+#ifndef __itkCudaImageToImageFilter_h
+#define __itkCudaImageToImageFilter_h
+
+#include "itkImage.h"
+#include "itkConceptChecking.h"
+#include "itkImageToImageFilter.h"
+
+namespace itk
+{
+
+/** \class CudaImageToImageFilter
+**/
+template <class TInputImage, class TOutputImage>
+class ITK_EXPORT CudaImageToImageFilter : public ImageToImageFilter<TInputImage, TOutputImage>
+{
+public:
+  /** Standard class typedefs. */
+  typedef CudaImageToImageFilter         Self;
+  typedef ImageToImageFilter<TInputImage, TOutputImage> Superclass;
+  typedef SmartPointer<Self>         Pointer;
+  typedef SmartPointer<const Self>   ConstPointer;
+
+
+  /** Run-time type information (and related methods). */
+  itkTypeMacro(CudaImageToImageFilter, ImageToImageFilter);
+
+  /** Superclass typedefs. */
+  typedef typename Superclass::OutputImageRegionType OutputImageRegionType;
+  typedef typename Superclass::OutputImagePixelType  OutputImagePixelType;
+
+  typedef typename TOutputImage::Pointer OutputImagePointer;
+  /** Some convenient typedefs. */
+  typedef TInputImage                             InputImageType;
+  typedef typename InputImageType::Pointer        InputImagePointer;
+  typedef typename InputImageType::ConstPointer   InputImageConstPointer;
+  typedef typename InputImageType::RegionType     InputImageRegionType;
+  typedef typename InputImageType::PixelType      InputImagePixelType;
+
+  /** ImageDimension constants */
+  itkStaticConstMacro(InputImageDimension, unsigned int,
+                      TInputImage::ImageDimension);
+  itkStaticConstMacro(OutputImageDimension, unsigned int,
+                      TOutputImage::ImageDimension);
+
+protected:
+  CudaImageToImageFilter();
+  ~CudaImageToImageFilter();
+  virtual void AllocateOutputs();
+
+private:
+  CudaImageToImageFilter(const Self&); //purposely not implemented
+  void operator=(const Self&); //purposely not implemented
+};
+
+} // end namespace itk
+
+// Define instantiation macro for this template.
+#define ITK_TEMPLATE_CudaImageToImageFilter(_, EXPORT, x, y) namespace itk { \
+    _(2(class EXPORT ImageToImageFilter< ITK_TEMPLATE_2 x >))		\
+      namespace Templates { typedef ImageToImageFilter< ITK_TEMPLATE_2 x > ImageToImageFilter##y; } \
+  }
+
+#if ITK_TEMPLATE_EXPLICIT
+# include "Templates/CudaImageToImageFilter+-.h"
+#endif
+
+#if ITK_TEMPLATE_TXX
+# include "CudaImageToImageFilter.txx"
+#endif
+
+#endif
diff --git Code/Common/CudaImageToImageFilter.txx Code/Common/CudaImageToImageFilter.txx
new file mode 100644
index 0000000..e397f3a
--- /dev/null
+++ Code/Common/CudaImageToImageFilter.txx
@@ -0,0 +1,84 @@
+/*=========================================================================
+
+  Program:   Insight Segmentation & Registration Toolkit
+  Module:    CudaImageToImageFilter.txx
+  Language:  C++
+  Date:      $Date$
+  Version:   $Revision$
+
+  Copyright (c) Insight Software Consortium. All rights reserved.
+  See ITKCopyright.txt or http://www.itk.org/HTML/Copyright.htm for details.
+
+  Portions of this code are covered under the VTK copyright.
+  See VTKCopyright.txt or http://www.kitware.com/VTKCopyright.htm for details.
+
+     This software is distributed WITHOUT ANY WARRANTY; without even
+     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
+     PURPOSE.  See the above copyright notices for more information.
+
+=========================================================================*/
+#ifndef __itkCudaImageToImageFilter_txx
+#define __itkCudaImageToImageFilter_txx
+#include "CudaImageToImageFilter.h"
+
+
+namespace itk
+{
+
+/**
+ *
+ */
+template <class TInputImage, class TOutputImage>
+CudaImageToImageFilter<TInputImage,TOutputImage>
+::CudaImageToImageFilter()
+{
+  // Modify superclass default values, can be overridden by subclasses
+  this->SetNumberOfRequiredInputs(1);
+}
+
+/**
+ *
+ */
+template <class TInputImage, class TOutputImage>
+CudaImageToImageFilter<TInputImage,TOutputImage>
+::~CudaImageToImageFilter()
+{
+}
+
+template <class TInputImage, class TOutputImage>
+void
+CudaImageToImageFilter<TInputImage,TOutputImage>
+::AllocateOutputs()
+{
+  typedef ImageBase<OutputImageDimension> ImageBaseType;
+  typename ImageBaseType::Pointer outputPtr;
+
+  // Allocate the output memory
+  for (unsigned int i=0; i < this->GetNumberOfOutputs(); i++)
+    {
+
+    // Check whether the output is an image of the appropriate
+    // dimension (use ProcessObject's version of the GetInput()
+    // method since it returns the input as a pointer to a
+    // DataObject as opposed to the subclass version which
+    // static_casts the input to an TInputImage).
+    outputPtr = dynamic_cast< ImageBaseType *>( this->ProcessObject::GetOutput(i) );
+
+    if ( outputPtr )
+      {
+//       outputPtr->SetBufferedRegion( outputPtr->GetRequestedRegion() );
+//       outputPtr->AllocateGPU();
+      // may not be the best way of doing this. Casting loses the
+      // AllocateGPU method
+      OutputImagePointer op2 = this->GetOutput(i);
+      op2->SetBufferedRegion( outputPtr->GetRequestedRegion() );
+      op2->AllocateGPU();
+      }
+    }
+}
+
+
+
+} // end namespace itk
+
+#endif
diff --git Code/Common/CudaInPlaceImageFilter.h Code/Common/CudaInPlaceImageFilter.h
new file mode 100644
index 0000000..9044a35
--- /dev/null
+++ Code/Common/CudaInPlaceImageFilter.h
@@ -0,0 +1,167 @@
+/*=========================================================================
+
+  Program:   Insight Segmentation & Registration Toolkit
+  Module:    CudaInPlaceImageFilter.h
+  Language:  C++
+  Date:      $Date$
+  Version:   $Revision$
+
+  Copyright (c) Insight Software Consortium. All rights reserved.
+  See ITKCopyright.txt or http://www.itk.org/HTML/Copyright.htm for details.
+
+     This software is distributed WITHOUT ANY WARRANTY; without even
+     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
+     PURPOSE.  See the above copyright notices for more information.
+
+=========================================================================*/
+#ifndef __itkCudaInPlaceImageFilter_h
+#define __itkCudaInPlaceImageFilter_h
+
+#include "itkImageToImageFilter.h"
+
+namespace itk
+{
+
+/** \class CudaInPlaceImageFilter
+ * \brief Base class for filters that take an image as input and overwrite that image as the output
+ *
+ * CudaInPlaceImageFilter is the base class for all process objects whose
+ * output image data is constructed by overwriting the input image
+ * data. In other words, the output bulk data is the same block of
+ * memory as the input bulk data.  This filter provides the mechanisms
+ * for in place image processing while maintaining general pipeline
+ * mechanics. CudaInPlaceImageFilters use less memory than standard
+ * ImageToImageFilters because the input buffer is reused as the
+ * output buffer.  However, this benefit does not come without a cost.
+ * Since the filter overwrites its input, the ownership of the bulk
+ * data is transitioned from the input data object to the output data
+ * object.  When a data object has multiple consumers with one
+ * of the consumers being an in place filter, the in place filter
+ * effectively destroys the bulk data for the data object. Upstream
+ * filters will then have to re-execute to regenerate the data object's
+ * bulk data for the remaining consumers.
+ *
+ * Since an CudaInPlaceImageFilter reuses the input bulk data memory for the
+ * output bulk data memory, the input image type must match the output
+ * image type.  If the input and output image types are not identical,
+ * the filter reverts to a traditional ImageToImageFilter behaviour
+ * where an output image is allocated.  In place operation can also be
+ * controlled (when the input and output image type match) via the
+ * methods InPlaceOn() and InPlaceOff().
+ *
+ * Subclasses of CudaInPlaceImageFilter must take extra care in how they
+ * manage memory using (and perhaps overriding) the implementations of
+ * ReleaseInputs() and AllocateOutputs() provided here.
+ *
+ * We need a special version for Cuda enabled filters because there
+ * isn't a way of creating an output image via Allocate that only has
+ * Device memory. Therefore we need to call the special AllocateGPU
+ * \ingroup ImageFilters
+ */
+template <class TInputImage, class TOutputImage=TInputImage>
+class ITK_EXPORT CudaInPlaceImageFilter : public ImageToImageFilter<TInputImage, TOutputImage>
+{
+public:
+  /** Standard class typedefs. */
+  typedef CudaInPlaceImageFilter                             Self;
+  typedef ImageToImageFilter<TInputImage, TOutputImage>  Superclass;
+  typedef SmartPointer<Self>                             Pointer;
+  typedef SmartPointer<const Self>                       ConstPointer;
+
+
+  /** Run-time type information (and related methods). */
+  itkTypeMacro(CudaInPlaceImageFilter,ImageToImageFilter);
+
+  /** Superclass typedefs. */
+  typedef typename Superclass::OutputImageType       OutputImageType;
+  typedef typename Superclass::OutputImagePointer    OutputImagePointer;
+  typedef typename Superclass::OutputImageRegionType OutputImageRegionType;
+  typedef typename Superclass::OutputImagePixelType  OutputImagePixelType;
+
+  /** Some convenient typedefs. */
+  typedef TInputImage                             InputImageType;
+  typedef typename InputImageType::Pointer        InputImagePointer;
+  typedef typename InputImageType::ConstPointer   InputImageConstPointer;
+  typedef typename InputImageType::RegionType     InputImageRegionType;
+  typedef typename InputImageType::PixelType      InputImagePixelType;
+
+  /** ImageDimension constants */
+  itkStaticConstMacro(InputImageDimension, unsigned int,
+                      TInputImage::ImageDimension);
+  itkStaticConstMacro(OutputImageDimension, unsigned int,
+                      TOutputImage::ImageDimension);
+
+  /** In place operation can be turned on and off. Asking for
+   * in-place operation, i.e. calling SetInplace(true) or InplaceOn(),
+   * will be effective only if CanRunInPlace also returns true.
+   * By default CanRunInPlace checks whether the input and output
+   * image type match. */
+  itkSetMacro(InPlace, bool);
+  itkGetConstMacro(InPlace, bool);
+  itkBooleanMacro(InPlace);
+
+  /** Can the filter run in place? To do so, the filter's first input
+   * and output must have the same dimension and pixel type. This
+   * method can be used in conjunction with the InPlace ivar to
+   * determine whether a particular use of the filter is really
+   * running in place. Some filters may be able to optimize their
+   * operation if the InPlace is true and CanRunInPlace is true.
+   * CanRunInPlace may also be overridded by CudaInPlaceImageFilter
+   * subclasses to fine tune its behavior. */
+  virtual bool CanRunInPlace() const
+    {
+    return (typeid(TInputImage) == typeid(TOutputImage));
+    }
+
+protected:
+  CudaInPlaceImageFilter();
+  ~CudaInPlaceImageFilter();
+
+  virtual void PrintSelf(std::ostream& os, Indent indent) const;
+
+  /** The GenerateData method normally allocates the buffers for all
+   * of the outputs of a filter. Since CudaInPlaceImageFilter's can use an
+   * overwritten version of the input for its output, the output
+   * buffer should not be allocated. When possible, we graft the input
+   * to the filter to the output.  If an InPlaceFilter has multiple
+   * outputs, then it would need to override this method to graft one
+   * of its outputs and allocate the remaining. Cuda filters will need
+   * to call this explicitly from inside GenerateData. */
+  virtual void AllocateOutputs();
+
+  /** CudaInPlaceImageFilter may transfer ownership of the input bulk data
+   * to the output object.  Once the output object owns the bulk data
+   * (done in AllocateOutputs()), the input object must release its
+   * hold on the bulk data.  ProcessObject::ReleaseInputs() only
+   * releases the input bulk data when the user has set the
+   * ReleaseDataFlag.  CudaInPlaceImageFilter::ReleaseInputs() also
+   * releases the input that it has overwritten.
+   *
+   * \sa ProcessObject::ReleaseInputs() */
+  virtual void ReleaseInputs();
+
+private:
+  CudaInPlaceImageFilter(const Self&); //purposely not implemented
+  void operator=(const Self&); //purposely not implemented
+
+  bool m_InPlace;
+
+};
+
+} // end namespace itk
+
+// Define instantiation macro for this template.
+#define ITK_TEMPLATE_CudaInPlaceImageFilter(_, EXPORT, x, y) namespace itk { \
+  _(2(class EXPORT CudaInPlaceImageFilter< ITK_TEMPLATE_2 x >)) \
+  namespace Templates { typedef CudaInPlaceImageFilter< ITK_TEMPLATE_2 x > CudaInPlaceImageFilter##y; } \
+  }
+
+#if ITK_TEMPLATE_EXPLICIT
+# include "Templates/CudaInPlaceImageFilter+-.h"
+#endif
+
+#if ITK_TEMPLATE_TXX
+# include "CudaInPlaceImageFilter.txx"
+#endif
+
+#endif
diff --git Code/Common/CudaInPlaceImageFilter.txx Code/Common/CudaInPlaceImageFilter.txx
new file mode 100644
index 0000000..f0be2ea
--- /dev/null
+++ Code/Common/CudaInPlaceImageFilter.txx
@@ -0,0 +1,133 @@
+/*=========================================================================
+
+  Program:   Insight Segmentation & Registration Toolkit
+  Module:    CudaInPlaceImageFilter.txx
+  Language:  C++
+  Date:      $Date$
+  Version:   $Revision$
+
+  Copyright (c) Insight Software Consortium. All rights reserved.
+  See ITKCopyright.txt or http://www.itk.org/HTML/Copyright.htm for details.
+
+     This software is distributed WITHOUT ANY WARRANTY; without even
+     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
+     PURPOSE.  See the above copyright notices for more information.
+
+=========================================================================*/
+#ifndef __itkCudaInPlaceImageFilter_txx
+#define __itkCudaInPlaceImageFilter_txx
+
+#include "CudaInPlaceImageFilter.h"
+
+namespace itk
+{
+
+/**
+ *
+ */
+template <class TInputImage, class TOutputImage>
+CudaInPlaceImageFilter<TInputImage, TOutputImage>
+::CudaInPlaceImageFilter()
+  : m_InPlace(true)
+{
+}
+
+/**
+ *
+ */
+template <class TInputImage, class TOutputImage>
+CudaInPlaceImageFilter<TInputImage, TOutputImage>
+::~CudaInPlaceImageFilter()
+{
+}
+
+
+
+template<class TInputImage, class TOutputImage>
+void
+CudaInPlaceImageFilter<TInputImage, TOutputImage>
+::PrintSelf(std::ostream& os, Indent indent) const
+{
+  Superclass::PrintSelf(os, indent);
+  os << indent << "InPlace: " << (m_InPlace ? "On" : "Off") << std::endl;
+  if ( this->CanRunInPlace())
+    {
+    os << indent << "The input and output to this filter are the same type. The filter can be run in place." << std::endl;
+    }
+  else
+    {
+    os << indent << "The input and output to this filter are different types. The filter cannot be run in place." << std::endl;
+    }
+}
+
+template<class TInputImage, class TOutputImage>
+void
+CudaInPlaceImageFilter<TInputImage, TOutputImage>
+::AllocateOutputs()
+{
+  // if told to run in place and the types support it,
+  if (this->GetInPlace() && this->CanRunInPlace())
+    {
+    // Graft this first input to the output.  Later, we'll need to
+    // remove the input's hold on the bulk data.
+    //
+    OutputImagePointer inputAsOutput
+      = dynamic_cast<TOutputImage *>(const_cast<TInputImage *>(this->GetInput()));
+    if (inputAsOutput)
+      {
+      // trigger the import here
+      inputAsOutput->GetDevicePointer();
+      this->GraftOutput( inputAsOutput );
+      }
+    }
+  else
+    {
+    // if we cannot cast the input to an output type, then allocate
+    // an output usual.
+    OutputImagePointer outputPtr;
+    outputPtr = this->GetOutput(0);
+    outputPtr->SetBufferedRegion(outputPtr->GetRequestedRegion());
+    outputPtr->AllocateGPU();
+    }
+
+
+
+  // If there are more than one outputs, allocate the remaining outputs
+  for (unsigned int i=1; i < this->GetNumberOfOutputs(); i++)
+    {
+    OutputImagePointer outputPtr;
+
+    outputPtr = this->GetOutput(i);
+    outputPtr->SetBufferedRegion(outputPtr->GetRequestedRegion());
+      outputPtr->AllocateGPU();
+    }
+}
+
+template<class TInputImage, class TOutputImage>
+void
+CudaInPlaceImageFilter<TInputImage, TOutputImage>
+::ReleaseInputs()
+{
+  // if told to run in place and the types support it,
+  if (this->GetInPlace() && this->CanRunInPlace())
+    {
+    // Release any input where the ReleaseData flag has been set
+    ProcessObject::ReleaseInputs();
+
+    // Release input 0 by default since we overwrote it
+    TInputImage * ptr = const_cast<TInputImage*>( this->GetInput() );
+    if( ptr )
+      {
+      ptr->ReleaseData();
+      }
+    }
+  else
+    {
+    Superclass::ReleaseInputs();
+    }
+}
+
+
+} // end namespace itk
+
+#endif
diff --git Code/Common/itkCudaImportImageContainer.h Code/Common/itkCudaImportImageContainer.h
new file mode 100644
index 0000000..2eb4b5f
--- /dev/null
+++ Code/Common/itkCudaImportImageContainer.h
@@ -0,0 +1,265 @@
+/*=========================================================================
+
+Program:   Insight Segmentation & Registration Toolkit
+Module:    $RCSfile: itkCudaImportImageContainer.h,v $
+Language:  C++
+Date:      $Date: 2009-04-25 12:24:09 $
+Version:   $Revision: 1.24 $
+
+Copyright (c) Insight Software Consortium. All rights reserved.
+See ITKCopyright.txt or http://www.itk.org/HTML/Copyright.htm for details.
+
+This software is distributed WITHOUT ANY WARRANTY; without even
+the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
+PURPOSE.  See the above copyright notices for more information.
+
+=========================================================================*/
+#ifndef __itkCudaImportImageContainer_h
+#define __itkCudaImportImageContainer_h
+
+#include "itkObject.h"
+#include "itkObjectFactory.h"
+#include "itkImportImageContainer.h"
+#include <cutil_inline.h>
+#include <utility>
+
+namespace itk
+{
+
+/** \class ImportImageContainer
+    * Defines an itk::Image front-end to a standard C-array. This container
+    * conforms to the ImageContainerInterface. This is a full-fleged Object,
+    * so there is modification time, debug, and reference count information.
+    *
+    * Template parameters for ImportImageContainer:
+    *
+    * TElementIdentifier =
+    *     An INTEGRAL type for use in indexing the imported buffer.
+    *
+    * TElement =
+    *    The element type stored in the container.
+    *
+    * \ingroup ImageObjects
+    * \ingroup IOFilters
+    */
+
+template <typename TElementIdentifier, typename TElement>
+class CudaImportImageContainer:
+    public ImportImageContainer <TElementIdentifier, TElement>
+{
+public:
+  /** Standard class typedefs. */
+  typedef CudaImportImageContainer  Self;
+  typedef ImportImageContainer<TElementIdentifier, TElement>      Superclass;
+  typedef SmartPointer<Self>        Pointer;
+  typedef SmartPointer<const Self>  ConstPointer;
+
+  /** Save the template parameters. */
+  typedef TElementIdentifier  ElementIdentifier;
+  typedef TElement            Element;
+
+  /** Method for creation through the object factory. */
+  itkNewMacro(Self);
+
+  /** Standard part of every itk Object. */
+  itkTypeMacro(CudaImportImageContainer, ImportImageContainer);
+
+  /** Get the pointer from which the image data is imported. */
+  TElement *GetImportPointer()
+  {
+    if (m_ImageLocation==GPU) { CopyToCPU(); }
+    return m_ImportPointer;
+  };
+
+  TElement *GetImportPointer() const
+  {
+    if (m_ImageLocation==GPU) { CopyToCPU();}
+    return m_ImportPointer;
+  };
+
+  TElement *GetDevicePointer()
+  {
+    if (m_ImageLocation==CPU) { CopyToGPU(); }
+    return m_DevicePointer;
+  };
+
+  // TElement *GetDevicePointer() const
+//          {
+//             if (m_ImageLocation==CPU) { CopyToGPU(); m_ImageLocation=BOTH; }
+//             return m_DevicePointer;
+//          };
+
+
+
+
+
+
+  /** Set the pointer from which the image data is imported.  "num" is
+          * the number of pixels in the block of memory. If
+          * "LetContainerManageMemory" is false, then the application retains
+          * the responsibility of freeing the memory for this image data.  If
+          * "LetContainerManageMemory" is true, then this class will free the
+          * memory when this object is destroyed. */
+  void SetImportPointer(TElement *ptr, TElementIdentifier num,
+			bool LetContainerManageMemory = false);
+  void SetDevicePointer(TElement *ptr, TElementIdentifier
+			num, bool LetContainerManageMemory = false);
+
+  /** Index operator. This version can be an lvalue. */
+  TElement & operator[](const ElementIdentifier id)
+  {
+    if (m_ImageLocation==GPU) { CopyToCPU(); }
+    return m_ImportPointer[id];
+  }
+
+  /** Index operator. This version can only be an rvalue */
+  const TElement & operator[](const ElementIdentifier id) const
+  {
+    if (m_ImageLocation==GPU) { CopyToCPU();}
+    return m_ImportPointer[id];
+  }
+
+  /** Return a pointer to the beginning of the buffer.  This is used by
+          * the image iterator class. */
+  TElement *GetBufferPointer()
+  {
+    if (m_ImageLocation == GPU)
+      {
+      CopyToCPU();
+      }
+    return m_ImportPointer;
+  }
+
+  /** Get the capacity of the container. */
+  unsigned long Capacity(void) const
+  { return (unsigned long) m_Capacity; }
+
+  /** Get the number of elements currently stored in the container. */
+  unsigned long Size(void) const
+  { return (unsigned long) m_Size; }
+
+  /** Tell the container to allocate enough memory to allow at least
+          * as many elements as the size given to be stored.  If new memory
+          * needs to be allocated, the contents of the old buffer are copied
+          * to the new area.  The old buffer is deleted if the original pointer
+          * was passed in using "LetContainerManageMemory"=true. The new buffer's
+          * memory management will be handled by the container from that point on.
+          *
+          * In general, Reserve should not change the usable elements of the
+          * container. However, in this particular case, Reserve as a Resize
+          * semantics that is kept for backward compatibility reasons.
+          *
+          * \sa SetImportPointer() */
+  void Reserve(ElementIdentifier num);
+  void ReserveGPU(ElementIdentifier num);
+
+  /** Tell the container to try to minimize its memory usage for
+          * storage of the current number of elements.  If new memory is
+          * allocated, the contents of old buffer are copied to the new area.
+          * The previous buffer is deleted if the original pointer was in
+                * using "LetContainerManageMemory"=true.  The new buffer's memory
+                * management will be handled by the container from that point on. */
+  void Squeeze(void);
+
+  /** Tell the container to release any of its allocated memory. */
+  void Initialize(void);
+
+
+  /** These methods allow to define whether upon destruction of this class
+          *  the memory buffer should be released or not.  Setting it to true
+          *  (or ON) makes that this class will take care of memory release.
+          *  Setting it to false (or OFF) will prevent the destructor from
+          *  deleting the memory buffer. This is desirable only when the data
+          *  is intended to be used by external applications.
+          *  Note that the normal logic of this class set the value of the boolean
+          *  flag. This may override your setting if you call this methods prematurely.
+          *  \warning Improper use of these methods will result in memory leaks */
+  itkSetMacro(ContainerManageMemory,bool);
+  itkGetConstMacro(ContainerManageMemory,bool);
+  itkBooleanMacro(ContainerManageMemory);
+  itkSetMacro(ContainerManageDevice,bool);
+  itkGetConstMacro(ContainerManageDevice,bool);
+  itkBooleanMacro(ContainerManageDevice);
+
+protected:
+  CudaImportImageContainer();
+  virtual ~CudaImportImageContainer();
+
+  /** PrintSelf routine. Normally this is a protected internal method. It is
+          * made public here so that Image can call this method.  Users should not
+          * call this method but should call Print() instead. */
+  void PrintSelf(std::ostream& os, Indent indent) const;
+
+  virtual TElement* AllocateElements(ElementIdentifier size) const;
+  virtual TElement* AllocateGPUElements(ElementIdentifier size) const;
+  virtual void DeallocateManagedMemory();
+
+  /* Set the m_Size member that represents the number of elements
+          * currently stored in the container. Use this function with great
+          * care since it only changes the m_Size member and not the actual size
+          * of the import pointer m_ImportPointer. It should typically
+          * be used only to override AllocateElements and
+          * DeallocateManagedMemory. */
+  itkSetMacro(Size,TElementIdentifier);
+
+  /* Set the m_Capacity member that represents the capacity of
+          * the current container. Use this function with great care
+          * since it only changes the m_Capacity member and not the actual
+          * capacity of the import pointer m_ImportPointer. It should typically
+          * be used only to override AllocateElements and
+          * DeallocateManagedMemory. */
+  itkSetMacro(Capacity,TElementIdentifier);
+
+
+  /* Set the m_ImportPointer member. Use this function with great care
+          * since it only changes the m_ImportPointer member but not the m_Size
+          * and m_Capacity members. It should typically be used only to override
+          * AllocateElements and DeallocateManagedMemory. */
+  void SetImportPointer(TElement *ptr)
+  { m_ImportPointer=ptr; m_ImageLocation=CPU; }
+  void SetDevicePointer(TElement *ptr)
+  { m_DevicePointer=ptr; m_ImageLocation=GPU; }
+
+private:
+  CudaImportImageContainer(const Self&); //purposely not implemented
+  void operator=(const Self&); //purposely not implemented
+
+  void CopyToGPU() const;
+  void CopyToCPU() const;
+  void AllocateGPU() const;
+  void AllocateCPU() const;
+
+  mutable TElement    *m_ImportPointer;
+  mutable TElement            *m_DevicePointer;
+  TElementIdentifier   m_Size;
+  TElementIdentifier   m_Capacity;
+  bool                 m_ContainerManageMemory;
+  bool                 m_ContainerManageDevice;
+
+  int                  serial;
+
+  mutable enum memoryStatus{
+    UNKNOWN,
+    BOTH,
+    CPU,
+    GPU
+  } m_ImageLocation;
+};
+
+} // end namespace itk
+
+// Define instantiation macro for this template.
+#define ITK_TEMPLATE_CudaImportImageContainer(_, EXPORT, x, y) namespace itk { \
+    _(2(class EXPORT CudaImportImageContainer< ITK_TEMPLATE_2 x >))	\
+      namespace Templates { typedef CudaImportImageContainer<ITK_TEMPLATE_2 x > CudaImportImageContainer##y; } \
+  }
+
+#if ITK_TEMPLATE_EXPLICIT
+# include "Templates/itkCudaImportImageContainer+-.h"
+#endif
+
+#if ITK_TEMPLATE_TXX
+# include "itkCudaImportImageContainer.txx"
+#endif
+
+#endif
diff --git Code/Common/itkCudaImportImageContainer.txx Code/Common/itkCudaImportImageContainer.txx
new file mode 100644
index 0000000..eeef520
--- /dev/null
+++ Code/Common/itkCudaImportImageContainer.txx
@@ -0,0 +1,398 @@
+/*=========================================================================
+
+  Program:   Insight Segmentation & Registration Toolkit
+  Module:    itkCudaImportImageContainer.h
+  Language:  C++
+  Date:      $Date$
+  Version:   $Revision$
+
+  Copyright (c) Insight Software Consortium. All rights reserved.
+  See ITKCopyright.txt or http://www.itk.org/HTML/Copyright.htm for details.
+
+     This software is distributed WITHOUT ANY WARRANTY; without even
+     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
+     PURPOSE.  See the above copyright notices for more information.
+
+=========================================================================*/
+#ifndef __itkCudaImportImageContainer_txx
+#define __itkCudaImportImageContainer_txx
+
+#include "itkCudaImportImageContainer.h"
+#include "cuda.h"
+#include <cstring>
+#include <stdlib.h>
+#include <string.h>
+#include <time.h>
+
+namespace itk
+{
+
+template <typename TElementIdentifier, typename TElement>
+CudaImportImageContainer<TElementIdentifier , TElement>
+::CudaImportImageContainer()
+{
+  //serial = (int)(rand()/10000000);
+  m_ImageLocation = UNKNOWN;
+  m_DevicePointer = 0;
+  m_ImportPointer = 0;
+  m_ContainerManageMemory = true;
+  m_ContainerManageDevice = true;
+  m_Capacity = 0;
+  m_Size = 0;
+}
+
+
+template <typename TElementIdentifier, typename TElement>
+CudaImportImageContainer< TElementIdentifier , TElement >
+::~CudaImportImageContainer()
+{
+  DeallocateManagedMemory();
+}
+
+
+/**
+    * Tell the container to allocate enough memory to allow at least
+    * as many elements as the size given to be stored.
+    */
+template <typename TElementIdentifier, typename TElement>
+void
+CudaImportImageContainer< TElementIdentifier , TElement >
+::Reserve(ElementIdentifier size)
+{
+  //std::cout << serial <<" Reserving CPU " << std::endl;
+
+  /* Parent Class */
+  if (m_ImportPointer)
+    {
+    if (size > m_Capacity)
+      {
+      TElement* temp = this->AllocateElements(size);
+      // only copy the portion of the data used in the old buffer
+
+      memcpy(temp, m_ImportPointer, m_Size*sizeof(TElement));
+
+      DeallocateManagedMemory();
+
+      m_ImportPointer = temp;
+      m_ContainerManageMemory = true;
+      m_Capacity = size;
+      m_Size = size;
+      this->Modified();
+      }
+    else
+      {
+      m_Size = size;
+      this->Modified();
+      }
+    }
+  else
+    {
+    m_ImportPointer = this->AllocateElements(size);
+    m_Capacity = size;
+    m_Size = size;
+    m_ContainerManageMemory = true;
+    this->Modified();
+    }
+  m_ImageLocation = CPU;
+  //std::cout << serial << " Reserved CPU " << std::endl;
+}
+
+/**
+    * Tell the container to allocate enough memory to allow at least
+    * as many elements as the size given to be stored.
+    */
+template <typename TElementIdentifier, typename TElement>
+void
+CudaImportImageContainer< TElementIdentifier , TElement >
+::ReserveGPU(ElementIdentifier size)
+{
+  //std::cout << serial <<" Reserving CPU " << std::endl;
+
+  /* Parent Class */
+  if (m_DevicePointer)
+    {
+    if (size > m_Capacity)
+      {
+      TElement* temp = this->AllocateGPUElements(size);
+      // only copy the portion of the data used in the old buffer
+
+      cudaMemcpy(temp, m_DevicePointer, m_Size*sizeof(TElement), cudaMemcpyDeviceToDevice);
+
+      DeallocateManagedMemory();
+
+      m_DevicePointer = temp;
+      m_ContainerManageMemory = true;
+      m_Capacity = size;
+      m_Size = size;
+      this->Modified();
+      }
+    else
+      {
+      m_Size = size;
+      this->Modified();
+      }
+    }
+  else
+    {
+    m_DevicePointer = this->AllocateGPUElements(size);
+    m_Capacity = size;
+    m_Size = size;
+    m_ContainerManageMemory = true;
+    this->Modified();
+    }
+  m_ImageLocation = GPU;
+  //std::cout << serial << " Reserved CPU " << std::endl;
+}
+
+
+/**
+    * Tell the container to try to minimize its memory usage for storage of
+    * the current number of elements.
+    */
+template <typename TElementIdentifier, typename TElement>
+void
+CudaImportImageContainer< TElementIdentifier , TElement >
+::Squeeze(void)
+{
+  //std::cout << serial << " Squeezing CPU " << std::endl;
+
+  /* Parent Code */
+  if (m_ImportPointer)
+    {
+    if (m_Size < m_Capacity)
+      {
+      const TElementIdentifier size = m_Size;
+      TElement* temp = this->AllocateElements(size);
+      memcpy(temp, m_ImportPointer, size*sizeof(TElement));
+
+      DeallocateManagedMemory();
+
+      m_ImportPointer = temp;
+      m_ContainerManageMemory = true;
+      m_Capacity = size;
+      m_Size = size;
+
+      this->Modified();
+      }
+    }
+
+  //std::cout << serial << " Squeezed CPU " << std::endl;
+}
+
+
+/**
+    * Tell the container to try to minimize its memory usage for storage of
+    * the current number of elements.
+    */
+template <typename TElementIdentifier, typename TElement>
+void
+CudaImportImageContainer< TElementIdentifier , TElement >
+::Initialize(void)
+{
+  //std::cout << serial << " Initializing CPU " << std::endl;
+
+  /* Parent code */
+  if (m_ImportPointer)
+    {
+    DeallocateManagedMemory();
+
+    m_ContainerManageMemory = true;
+
+    this->Modified();
+    }
+
+  //std::cout << serial << " Initialized CPU " << std::endl;
+}
+
+
+/**
+    * Set the pointer from which the image data is imported.  "num" is
+    * the number of pixels in the block of memory. If
+    * "LetContainerManageMemory" is false, then the application retains
+    * the responsibility of freeing the memory for this image data.  If
+    * "LetContainerManageMemory" is true, then this class will free the
+    * memory when this object is destroyed.
+    */
+template <typename TElementIdentifier, typename TElement>
+void
+CudaImportImageContainer< TElementIdentifier , TElement >
+::SetImportPointer(TElement *ptr, TElementIdentifier num,
+		   bool LetContainerManageMemory)
+{
+  DeallocateManagedMemory();
+  m_ImportPointer = ptr;
+  m_ContainerManageMemory = LetContainerManageMemory;
+  m_Capacity = num;
+  m_Size = num;
+  //AllocateGPU();
+
+  this->Modified();
+  m_ImageLocation = CPU;
+}
+
+template <typename TElementIdentifier, typename TElement>
+void
+CudaImportImageContainer< TElementIdentifier, TElement >
+::SetDevicePointer(TElement *ptr, TElementIdentifier num,
+		   bool LetContainerManageDevice)
+{
+  DeallocateManagedMemory();
+  m_DevicePointer = ptr;
+  m_ContainerManageDevice = LetContainerManageDevice;
+  m_Capacity = num;
+  m_Size = num;
+  this->Modified();
+  m_ImageLocation = GPU;
+}
+
+template <typename TElementIdentifier, typename TElement>
+TElement* CudaImportImageContainer< TElementIdentifier , TElement >
+::AllocateElements(ElementIdentifier size) const
+{
+  // Encapsulate all image memory allocation here to throw an
+  // exception when memory allocation fails even when the compiler
+  // does not do this by default.
+
+  /* Parent code */
+  TElement* data;
+  try
+    {
+    data = new TElement[size];
+    }
+  catch(...)
+    {
+    data = 0;
+    }
+  if(!data)
+    {
+    // We cannot construct an error string here because we may be out
+    // of memory.  Do not use the exception macro.
+    throw MemoryAllocationError(__FILE__, __LINE__,
+				"Failed to allocate memory for image.",
+				ITK_LOCATION);
+    }
+  return data;
+
+}
+
+template <typename TElementIdentifier, typename TElement>
+TElement* CudaImportImageContainer< TElementIdentifier , TElement >
+::AllocateGPUElements(ElementIdentifier size) const
+{
+  // Encapsulate all image memory allocation here to throw an
+  // exception when memory allocation fails even when the compiler
+  // does not do this by default.
+
+  /* Parent code */
+  TElement* data;
+  try
+    {
+    void * m_Tmp;
+    cudaMalloc( &m_Tmp, sizeof(TElement)*size);
+    data = (TElement *)m_Tmp;
+    m_ImageLocation = GPU;
+    }
+  catch(...)
+    {
+    data = 0;
+    }
+  if(!data)
+    {
+    // We cannot construct an error string here because we may be out
+    // of memory.  Do not use the exception macro.
+    throw MemoryAllocationError(__FILE__, __LINE__,
+				"Failed to allocate GPU memory for image.",
+				ITK_LOCATION);
+    }
+  return data;
+
+}
+
+template <typename TElementIdentifier, typename TElement>
+void CudaImportImageContainer< TElementIdentifier , TElement >
+::DeallocateManagedMemory()
+{
+  // CPU Deallocate
+  if (m_ImportPointer && m_ContainerManageMemory)
+    {
+    delete [] m_ImportPointer;
+    }
+
+  // GPU Deallocate
+  if (m_DevicePointer && m_ContainerManageDevice)
+    {
+    cudaFree(m_DevicePointer);
+    }
+
+  m_DevicePointer = 0;
+  m_ImportPointer = 0;
+  m_Capacity = 0;
+  m_Size = 0;
+}
+
+template <typename TElementIdentifier, typename TElement>
+void
+CudaImportImageContainer< TElementIdentifier , TElement >
+::PrintSelf(std::ostream& os, Indent indent) const
+{
+  Superclass::PrintSelf(os,indent);
+
+  os << indent << "Pointer: " << static_cast<void *>(m_ImportPointer) << std::endl;
+  os << indent << "DevPointer: " << static_cast<void *>(m_DevicePointer) << std::endl;
+  os << indent << "Image location: " << m_ImageLocation << std::endl;
+  os << indent << "Container manages memory: "
+     << (m_ContainerManageMemory ? "true" : "false") << std::endl;
+  os << indent << "Container manages device memory: "
+     << (m_ContainerManageDevice ? "true" : "false") << std::endl;
+  os << indent << "Size: " << m_Size << std::endl;
+  os << indent << "Capacity: " << m_Capacity << std::endl;
+}
+
+template <typename TElementIdentifier, typename TElement>
+void
+CudaImportImageContainer< TElementIdentifier , TElement >
+::CopyToGPU() const
+{
+
+  AllocateGPU();
+  cudaMemcpy(m_DevicePointer, m_ImportPointer,
+	     sizeof(TElement)*m_Size, cudaMemcpyHostToDevice);
+
+  m_ImageLocation = GPU;
+}
+
+template <typename TElementIdentifier, typename TElement>
+void
+CudaImportImageContainer< TElementIdentifier , TElement >
+::CopyToCPU() const
+{
+  AllocateCPU();
+  cudaMemcpy(m_ImportPointer, m_DevicePointer,
+	     sizeof(TElement)*m_Size, cudaMemcpyDeviceToHost);
+  m_ImageLocation = CPU;
+}
+
+template <typename TElementIdentifier, typename TElement>
+void
+CudaImportImageContainer< TElementIdentifier, TElement >
+::AllocateGPU() const
+{
+  void * m_Tmp;
+  cudaMalloc( &m_Tmp, sizeof(TElement)*m_Size);
+  m_DevicePointer = (TElement *)m_Tmp;
+}
+
+template <typename TElementIdentifier, typename TElement>
+void
+CudaImportImageContainer< TElementIdentifier, TElement >
+::AllocateCPU() const
+{
+  // should only need to allocate CPU memory if the import
+  // pointer is null
+  if (!m_ImportPointer)
+    m_ImportPointer = (TElement *)malloc(sizeof(TElement)*m_Size);
+}
+
+} // end namespace itk
+
+#endif
diff --git Code/Common/itkImage.h Code/Common/itkImage.h
index 0c26606..e58932b 100644
--- Code/Common/itkImage.h
+++ Code/Common/itkImage.h
@@ -19,6 +19,7 @@
 
 #include "itkImageBase.h"
 #include "itkImageRegion.h"
+#include "itkCudaImportImageContainer.h"
 #include "itkImportImageContainer.h"
 #include "itkDefaultPixelAccessor.h"
 #include "itkDefaultPixelAccessorFunctor.h"
@@ -125,7 +126,8 @@ public:
   itkStaticConstMacro(ImageDimension, unsigned int, VImageDimension);
 
   /** Container used to store pixels in the image. */
-  typedef ImportImageContainer<unsigned long, PixelType> PixelContainer;
+  typedef CudaImportImageContainer<unsigned long, PixelType> PixelContainer;
+  typedef ImportImageContainer<unsigned long, PixelType> SuperPixelContainer;
 
   /** Index typedef support. An index is used to access pixel values. */
   typedef typename Superclass::IndexType       IndexType;
@@ -162,6 +164,7 @@ public:
   /** Allocate the image memory. The size of the image must
    * already be set, e.g. by calling SetRegions(). */
   void Allocate();
+  void AllocateGPU();
 
   /** Convenience methods to set the LargestPossibleRegion,
    *  BufferedRegion and RequestedRegion. Allocate must still be called.
@@ -241,6 +244,14 @@ public:
   const TPixel *GetBufferPointer() const
     { return m_Buffer ? m_Buffer->GetBufferPointer() : 0; }
 
+  /** Return a pointer to the beginning of the buffer on the GPU.  This is used by
+   * the image iterator class. */
+  TPixel *GetDevicePointer()
+    { return m_Buffer ? m_Buffer->GetDevicePointer() : 0; }
+  TPixel *GetDevicePointer() const
+    { return m_Buffer ? m_Buffer->GetDevicePointer() : 0; }
+
+
   /** Return a pointer to the container. */
   PixelContainer* GetPixelContainer()
     { return m_Buffer.GetPointer(); }
diff --git Code/Common/itkImage.txx Code/Common/itkImage.txx
index 8d369dc..63c0f23 100644
--- Code/Common/itkImage.txx
+++ Code/Common/itkImage.txx
@@ -54,6 +54,20 @@ Image<TPixel, VImageDimension>
 template<class TPixel, unsigned int VImageDimension>
 void 
 Image<TPixel, VImageDimension>
+::AllocateGPU()
+{
+  unsigned long num;
+
+  this->ComputeOffsetTable();
+  num = this->GetOffsetTable()[VImageDimension];
+  
+  m_Buffer->ReserveGPU(num);
+}
+
+
+template<class TPixel, unsigned int VImageDimension>
+void 
+Image<TPixel, VImageDimension>
 ::Initialize()
 {
   //
diff --git Code/Common/itkInPlaceImageFilter.txx Code/Common/itkInPlaceImageFilter.txx
index 545af67..f3d1c24 100644
--- Code/Common/itkInPlaceImageFilter.txx
+++ Code/Common/itkInPlaceImageFilter.txx
@@ -68,6 +68,9 @@ void
 InPlaceImageFilter<TInputImage, TOutputImage>
 ::AllocateOutputs()
 {
+  // trigger a copy if the previous filter was GPU enabled.
+  this->GetInput()->GetBufferPointer();
+
   // if told to run in place and the types support it, 
   if (this->GetInPlace() && this->CanRunInPlace())
     {
@@ -78,6 +81,7 @@ InPlaceImageFilter<TInputImage, TOutputImage>
       = dynamic_cast<TOutputImage *>(const_cast<TInputImage *>(this->GetInput()));
     if (inputAsOutput)
       {
+      // trigger copy from GPU
       this->GraftOutput( inputAsOutput );
       }
     else
